// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: fortissimo.proto

package fortissimo

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GetSong
type GetSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSongRequest) Reset() {
	*x = GetSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongRequest) ProtoMessage() {}

func (x *GetSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongRequest.ProtoReflect.Descriptor instead.
func (*GetSongRequest) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{0}
}

func (x *GetSongRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *GetSongResponse) Reset() {
	*x = GetSongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongResponse) ProtoMessage() {}

func (x *GetSongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongResponse.ProtoReflect.Descriptor instead.
func (*GetSongResponse) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{1}
}

func (x *GetSongResponse) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

// AddSong
type AddSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *AddSongRequest) Reset() {
	*x = AddSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongRequest) ProtoMessage() {}

func (x *AddSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongRequest.ProtoReflect.Descriptor instead.
func (*AddSongRequest) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{2}
}

func (x *AddSongRequest) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

type AddSongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *AddSongResponse) Reset() {
	*x = AddSongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSongResponse) ProtoMessage() {}

func (x *AddSongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSongResponse.ProtoReflect.Descriptor instead.
func (*AddSongResponse) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{3}
}

func (x *AddSongResponse) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

// RemoveSong
type RemoveSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveSongRequest) Reset() {
	*x = RemoveSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSongRequest) ProtoMessage() {}

func (x *RemoveSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSongRequest.ProtoReflect.Descriptor instead.
func (*RemoveSongRequest) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveSongRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveSongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSongResponse) Reset() {
	*x = RemoveSongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSongResponse) ProtoMessage() {}

func (x *RemoveSongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSongResponse.ProtoReflect.Descriptor instead.
func (*RemoveSongResponse) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{5}
}

// GetSongs
type GetSongsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSongsRequest) Reset() {
	*x = GetSongsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsRequest) ProtoMessage() {}

func (x *GetSongsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsRequest.ProtoReflect.Descriptor instead.
func (*GetSongsRequest) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{6}
}

type GetSongsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Song *Song `protobuf:"bytes,1,opt,name=song,proto3" json:"song,omitempty"`
}

func (x *GetSongsResponse) Reset() {
	*x = GetSongsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSongsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSongsResponse) ProtoMessage() {}

func (x *GetSongsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSongsResponse.ProtoReflect.Descriptor instead.
func (*GetSongsResponse) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{7}
}

func (x *GetSongsResponse) GetSong() *Song {
	if x != nil {
		return x.Song
	}
	return nil
}

// Data Objects
type Song struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                      string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TitleSort                  string               `protobuf:"bytes,3,opt,name=title_sort,json=titleSort,proto3" json:"title_sort,omitempty"`
	Artists                    []string             `protobuf:"bytes,4,rep,name=artists,proto3" json:"artists,omitempty"`
	FirstArtist                string               `protobuf:"bytes,5,opt,name=first_artist,json=firstArtist,proto3" json:"first_artist,omitempty"`
	FirstArtistSort            string               `protobuf:"bytes,6,opt,name=first_artist_sort,json=firstArtistSort,proto3" json:"first_artist_sort,omitempty"`
	FirstAlbumArtist           string               `protobuf:"bytes,7,opt,name=first_album_artist,json=firstAlbumArtist,proto3" json:"first_album_artist,omitempty"`
	FirstAlbumArtistSort       string               `protobuf:"bytes,8,opt,name=first_album_artist_sort,json=firstAlbumArtistSort,proto3" json:"first_album_artist_sort,omitempty"`
	AlbumArtist                string               `protobuf:"bytes,9,opt,name=album_artist,json=albumArtist,proto3" json:"album_artist,omitempty"`
	Album                      string               `protobuf:"bytes,10,opt,name=album,proto3" json:"album,omitempty"`
	Publisher                  string               `protobuf:"bytes,11,opt,name=publisher,proto3" json:"publisher,omitempty"`
	FirstComposer              string               `protobuf:"bytes,12,opt,name=first_composer,json=firstComposer,proto3" json:"first_composer,omitempty"`
	Composers                  string               `protobuf:"bytes,13,opt,name=composers,proto3" json:"composers,omitempty"`
	Conductor                  string               `protobuf:"bytes,14,opt,name=conductor,proto3" json:"conductor,omitempty"`
	Genre                      string               `protobuf:"bytes,15,opt,name=genre,proto3" json:"genre,omitempty"`
	Grouping                   string               `protobuf:"bytes,16,opt,name=grouping,proto3" json:"grouping,omitempty"`
	Year                       uint32               `protobuf:"varint,17,opt,name=year,proto3" json:"year,omitempty"`
	TrackNumber                uint32               `protobuf:"varint,18,opt,name=track_number,json=trackNumber,proto3" json:"track_number,omitempty"`
	OfTrackNumber              uint32               `protobuf:"varint,19,opt,name=of_track_number,json=ofTrackNumber,proto3" json:"of_track_number,omitempty"`
	DiskNumber                 uint32               `protobuf:"varint,20,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
	OfDiskNumber               uint32               `protobuf:"varint,21,opt,name=of_disk_number,json=ofDiskNumber,proto3" json:"of_disk_number,omitempty"`
	Duration                   uint32               `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`
	PlayCount                  uint32               `protobuf:"varint,23,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	SkippedCount               uint32               `protobuf:"varint,24,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	Comment                    string               `protobuf:"bytes,25,opt,name=comment,proto3" json:"comment,omitempty"`
	BeatsPerMinute             uint32               `protobuf:"varint,26,opt,name=beats_per_minute,json=beatsPerMinute,proto3" json:"beats_per_minute,omitempty"`
	Copyright                  string               `protobuf:"bytes,27,opt,name=copyright,proto3" json:"copyright,omitempty"`
	DateTagged                 *timestamp.Timestamp `protobuf:"bytes,28,opt,name=date_tagged,json=dateTagged,proto3" json:"date_tagged,omitempty"`
	Description                string               `protobuf:"bytes,29,opt,name=description,proto3" json:"description,omitempty"`
	FirstComposerSort          string               `protobuf:"bytes,30,opt,name=first_composer_sort,json=firstComposerSort,proto3" json:"first_composer_sort,omitempty"`
	ArtistsSort                string               `protobuf:"bytes,31,opt,name=artists_sort,json=artistsSort,proto3" json:"artists_sort,omitempty"`
	Lyrics                     string               `protobuf:"bytes,32,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	InitialKey                 string               `protobuf:"bytes,33,opt,name=initial_key,json=initialKey,proto3" json:"initial_key,omitempty"`
	Isrc                       string               `protobuf:"bytes,34,opt,name=isrc,proto3" json:"isrc,omitempty"`
	Subtitle                   string               `protobuf:"bytes,35,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	MusicBrainzArtistId        string               `protobuf:"bytes,36,opt,name=music_brainz_artist_id,json=musicBrainzArtistId,proto3" json:"music_brainz_artist_id,omitempty"`
	MusicBrainzDiscId          string               `protobuf:"bytes,37,opt,name=music_brainz_disc_id,json=musicBrainzDiscId,proto3" json:"music_brainz_disc_id,omitempty"`
	MusicBrainzReleaseArtistId string               `protobuf:"bytes,38,opt,name=music_brainz_release_artist_id,json=musicBrainzReleaseArtistId,proto3" json:"music_brainz_release_artist_id,omitempty"`
	MusicBrainzReleaseCountry  string               `protobuf:"bytes,39,opt,name=music_brainz_release_country,json=musicBrainzReleaseCountry,proto3" json:"music_brainz_release_country,omitempty"`
	MusicBrainzReleaseGroupId  string               `protobuf:"bytes,40,opt,name=music_brainz_release_group_id,json=musicBrainzReleaseGroupId,proto3" json:"music_brainz_release_group_id,omitempty"`
	MusicBrainzReleaseId       string               `protobuf:"bytes,41,opt,name=music_brainz_release_id,json=musicBrainzReleaseId,proto3" json:"music_brainz_release_id,omitempty"`
	MusicBrainzReleaseStatus   string               `protobuf:"bytes,42,opt,name=music_brainz_release_status,json=musicBrainzReleaseStatus,proto3" json:"music_brainz_release_status,omitempty"`
	MusicBrainzReleaseType     string               `protobuf:"bytes,43,opt,name=music_brainz_release_type,json=musicBrainzReleaseType,proto3" json:"music_brainz_release_type,omitempty"`
	MusicBrainzTrackId         string               `protobuf:"bytes,44,opt,name=music_brainz_track_id,json=musicBrainzTrackId,proto3" json:"music_brainz_track_id,omitempty"`
	MusicIpId                  string               `protobuf:"bytes,45,opt,name=music_ip_id,json=musicIpId,proto3" json:"music_ip_id,omitempty"`
	RemixedBy                  string               `protobuf:"bytes,46,opt,name=remixed_by,json=remixedBy,proto3" json:"remixed_by,omitempty"`
	ReplayGainAlbumGain        float64              `protobuf:"fixed64,47,opt,name=replay_gain_album_gain,json=replayGainAlbumGain,proto3" json:"replay_gain_album_gain,omitempty"`
	ReplayGainAlbumPeak        float64              `protobuf:"fixed64,48,opt,name=replay_gain_album_peak,json=replayGainAlbumPeak,proto3" json:"replay_gain_album_peak,omitempty"`
	ReplayGainTrackGain        float64              `protobuf:"fixed64,49,opt,name=replay_gain_track_gain,json=replayGainTrackGain,proto3" json:"replay_gain_track_gain,omitempty"`
	ReplayGainTrackPeak        float64              `protobuf:"fixed64,50,opt,name=replay_gain_track_peak,json=replayGainTrackPeak,proto3" json:"replay_gain_track_peak,omitempty"`
	MimeType                   string               `protobuf:"bytes,51,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Path                       string               `protobuf:"bytes,52,opt,name=path,proto3" json:"path,omitempty"`
	Hash                       string               `protobuf:"bytes,53,opt,name=hash,proto3" json:"hash,omitempty"`
	CreatedDate                *timestamp.Timestamp `protobuf:"bytes,54,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate               *timestamp.Timestamp `protobuf:"bytes,55,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
}

func (x *Song) Reset() {
	*x = Song{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortissimo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Song) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Song) ProtoMessage() {}

func (x *Song) ProtoReflect() protoreflect.Message {
	mi := &file_fortissimo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Song.ProtoReflect.Descriptor instead.
func (*Song) Descriptor() ([]byte, []int) {
	return file_fortissimo_proto_rawDescGZIP(), []int{8}
}

func (x *Song) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Song) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Song) GetTitleSort() string {
	if x != nil {
		return x.TitleSort
	}
	return ""
}

func (x *Song) GetArtists() []string {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *Song) GetFirstArtist() string {
	if x != nil {
		return x.FirstArtist
	}
	return ""
}

func (x *Song) GetFirstArtistSort() string {
	if x != nil {
		return x.FirstArtistSort
	}
	return ""
}

func (x *Song) GetFirstAlbumArtist() string {
	if x != nil {
		return x.FirstAlbumArtist
	}
	return ""
}

func (x *Song) GetFirstAlbumArtistSort() string {
	if x != nil {
		return x.FirstAlbumArtistSort
	}
	return ""
}

func (x *Song) GetAlbumArtist() string {
	if x != nil {
		return x.AlbumArtist
	}
	return ""
}

func (x *Song) GetAlbum() string {
	if x != nil {
		return x.Album
	}
	return ""
}

func (x *Song) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Song) GetFirstComposer() string {
	if x != nil {
		return x.FirstComposer
	}
	return ""
}

func (x *Song) GetComposers() string {
	if x != nil {
		return x.Composers
	}
	return ""
}

func (x *Song) GetConductor() string {
	if x != nil {
		return x.Conductor
	}
	return ""
}

func (x *Song) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Song) GetGrouping() string {
	if x != nil {
		return x.Grouping
	}
	return ""
}

func (x *Song) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Song) GetTrackNumber() uint32 {
	if x != nil {
		return x.TrackNumber
	}
	return 0
}

func (x *Song) GetOfTrackNumber() uint32 {
	if x != nil {
		return x.OfTrackNumber
	}
	return 0
}

func (x *Song) GetDiskNumber() uint32 {
	if x != nil {
		return x.DiskNumber
	}
	return 0
}

func (x *Song) GetOfDiskNumber() uint32 {
	if x != nil {
		return x.OfDiskNumber
	}
	return 0
}

func (x *Song) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Song) GetPlayCount() uint32 {
	if x != nil {
		return x.PlayCount
	}
	return 0
}

func (x *Song) GetSkippedCount() uint32 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *Song) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Song) GetBeatsPerMinute() uint32 {
	if x != nil {
		return x.BeatsPerMinute
	}
	return 0
}

func (x *Song) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *Song) GetDateTagged() *timestamp.Timestamp {
	if x != nil {
		return x.DateTagged
	}
	return nil
}

func (x *Song) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Song) GetFirstComposerSort() string {
	if x != nil {
		return x.FirstComposerSort
	}
	return ""
}

func (x *Song) GetArtistsSort() string {
	if x != nil {
		return x.ArtistsSort
	}
	return ""
}

func (x *Song) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *Song) GetInitialKey() string {
	if x != nil {
		return x.InitialKey
	}
	return ""
}

func (x *Song) GetIsrc() string {
	if x != nil {
		return x.Isrc
	}
	return ""
}

func (x *Song) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Song) GetMusicBrainzArtistId() string {
	if x != nil {
		return x.MusicBrainzArtistId
	}
	return ""
}

func (x *Song) GetMusicBrainzDiscId() string {
	if x != nil {
		return x.MusicBrainzDiscId
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseArtistId() string {
	if x != nil {
		return x.MusicBrainzReleaseArtistId
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseCountry() string {
	if x != nil {
		return x.MusicBrainzReleaseCountry
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseGroupId() string {
	if x != nil {
		return x.MusicBrainzReleaseGroupId
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseId() string {
	if x != nil {
		return x.MusicBrainzReleaseId
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseStatus() string {
	if x != nil {
		return x.MusicBrainzReleaseStatus
	}
	return ""
}

func (x *Song) GetMusicBrainzReleaseType() string {
	if x != nil {
		return x.MusicBrainzReleaseType
	}
	return ""
}

func (x *Song) GetMusicBrainzTrackId() string {
	if x != nil {
		return x.MusicBrainzTrackId
	}
	return ""
}

func (x *Song) GetMusicIpId() string {
	if x != nil {
		return x.MusicIpId
	}
	return ""
}

func (x *Song) GetRemixedBy() string {
	if x != nil {
		return x.RemixedBy
	}
	return ""
}

func (x *Song) GetReplayGainAlbumGain() float64 {
	if x != nil {
		return x.ReplayGainAlbumGain
	}
	return 0
}

func (x *Song) GetReplayGainAlbumPeak() float64 {
	if x != nil {
		return x.ReplayGainAlbumPeak
	}
	return 0
}

func (x *Song) GetReplayGainTrackGain() float64 {
	if x != nil {
		return x.ReplayGainTrackGain
	}
	return 0
}

func (x *Song) GetReplayGainTrackPeak() float64 {
	if x != nil {
		return x.ReplayGainTrackPeak
	}
	return 0
}

func (x *Song) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Song) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Song) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Song) GetCreatedDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *Song) GetModifiedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

var File_fortissimo_proto protoreflect.FileDescriptor

var file_fortissimo_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e,
	0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x36, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72,
	0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f,
	0x6e, 0x67, 0x22, 0x37, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f,
	0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x6f, 0x6e, 0x67, 0x22, 0x23, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x73, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f,
	0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x73,
	0x6f, 0x6e, 0x67, 0x22, 0xf1, 0x10, 0x0a, 0x04, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x66, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x65, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x72, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73,
	0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x7a, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x44, 0x69,
	0x73, 0x63, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72,
	0x61, 0x69, 0x6e, 0x7a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x7a, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e,
	0x7a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x7a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33,
	0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x61,
	0x69, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x47, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x65,
	0x61, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x32, 0xaa, 0x02, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x74,
	0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e,
	0x67, 0x12, 0x1a, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73,
	0x69, 0x6d, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x1a,
	0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x46, 0x6f, 0x72,
	0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69,
	0x6d, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d,
	0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x55, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x65, 0x66, 0x66, 0x73, 0x76, 0x61, 0x6a, 0x6c, 0x65, 0x6e, 0x6b, 0x6f,
	0x2f, 0x66, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0xaa, 0x02, 0x1b,
	0x46, 0x6f, 0x72, 0x74, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fortissimo_proto_rawDescOnce sync.Once
	file_fortissimo_proto_rawDescData = file_fortissimo_proto_rawDesc
)

func file_fortissimo_proto_rawDescGZIP() []byte {
	file_fortissimo_proto_rawDescOnce.Do(func() {
		file_fortissimo_proto_rawDescData = protoimpl.X.CompressGZIP(file_fortissimo_proto_rawDescData)
	})
	return file_fortissimo_proto_rawDescData
}

var file_fortissimo_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_fortissimo_proto_goTypes = []interface{}{
	(*GetSongRequest)(nil),      // 0: Fortissimo.GetSongRequest
	(*GetSongResponse)(nil),     // 1: Fortissimo.GetSongResponse
	(*AddSongRequest)(nil),      // 2: Fortissimo.AddSongRequest
	(*AddSongResponse)(nil),     // 3: Fortissimo.AddSongResponse
	(*RemoveSongRequest)(nil),   // 4: Fortissimo.RemoveSongRequest
	(*RemoveSongResponse)(nil),  // 5: Fortissimo.RemoveSongResponse
	(*GetSongsRequest)(nil),     // 6: Fortissimo.GetSongsRequest
	(*GetSongsResponse)(nil),    // 7: Fortissimo.GetSongsResponse
	(*Song)(nil),                // 8: Fortissimo.Song
	(*timestamp.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_fortissimo_proto_depIdxs = []int32{
	8,  // 0: Fortissimo.GetSongResponse.song:type_name -> Fortissimo.Song
	8,  // 1: Fortissimo.AddSongRequest.song:type_name -> Fortissimo.Song
	8,  // 2: Fortissimo.AddSongResponse.song:type_name -> Fortissimo.Song
	8,  // 3: Fortissimo.GetSongsResponse.song:type_name -> Fortissimo.Song
	9,  // 4: Fortissimo.Song.date_tagged:type_name -> google.protobuf.Timestamp
	9,  // 5: Fortissimo.Song.created_date:type_name -> google.protobuf.Timestamp
	9,  // 6: Fortissimo.Song.modified_date:type_name -> google.protobuf.Timestamp
	0,  // 7: Fortissimo.Fortissimo.GetSong:input_type -> Fortissimo.GetSongRequest
	6,  // 8: Fortissimo.Fortissimo.GetSongs:input_type -> Fortissimo.GetSongsRequest
	2,  // 9: Fortissimo.Fortissimo.AddSong:input_type -> Fortissimo.AddSongRequest
	4,  // 10: Fortissimo.Fortissimo.RemoveSong:input_type -> Fortissimo.RemoveSongRequest
	1,  // 11: Fortissimo.Fortissimo.GetSong:output_type -> Fortissimo.GetSongResponse
	7,  // 12: Fortissimo.Fortissimo.GetSongs:output_type -> Fortissimo.GetSongsResponse
	3,  // 13: Fortissimo.Fortissimo.AddSong:output_type -> Fortissimo.AddSongResponse
	5,  // 14: Fortissimo.Fortissimo.RemoveSong:output_type -> Fortissimo.RemoveSongResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_fortissimo_proto_init() }
func file_fortissimo_proto_init() {
	if File_fortissimo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fortissimo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSongsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortissimo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Song); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fortissimo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fortissimo_proto_goTypes,
		DependencyIndexes: file_fortissimo_proto_depIdxs,
		MessageInfos:      file_fortissimo_proto_msgTypes,
	}.Build()
	File_fortissimo_proto = out.File
	file_fortissimo_proto_rawDesc = nil
	file_fortissimo_proto_goTypes = nil
	file_fortissimo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FortissimoClient is the client API for Fortissimo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FortissimoClient interface {
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (Fortissimo_GetSongsClient, error)
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	RemoveSong(ctx context.Context, in *RemoveSongRequest, opts ...grpc.CallOption) (*RemoveSongResponse, error)
}

type fortissimoClient struct {
	cc grpc.ClientConnInterface
}

func NewFortissimoClient(cc grpc.ClientConnInterface) FortissimoClient {
	return &fortissimoClient{cc}
}

func (c *fortissimoClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, "/Fortissimo.Fortissimo/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortissimoClient) GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (Fortissimo_GetSongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fortissimo_serviceDesc.Streams[0], "/Fortissimo.Fortissimo/GetSongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &fortissimoGetSongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fortissimo_GetSongsClient interface {
	Recv() (*GetSongsResponse, error)
	grpc.ClientStream
}

type fortissimoGetSongsClient struct {
	grpc.ClientStream
}

func (x *fortissimoGetSongsClient) Recv() (*GetSongsResponse, error) {
	m := new(GetSongsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fortissimoClient) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, "/Fortissimo.Fortissimo/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortissimoClient) RemoveSong(ctx context.Context, in *RemoveSongRequest, opts ...grpc.CallOption) (*RemoveSongResponse, error) {
	out := new(RemoveSongResponse)
	err := c.cc.Invoke(ctx, "/Fortissimo.Fortissimo/RemoveSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FortissimoServer is the server API for Fortissimo service.
type FortissimoServer interface {
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	GetSongs(*GetSongsRequest, Fortissimo_GetSongsServer) error
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	RemoveSong(context.Context, *RemoveSongRequest) (*RemoveSongResponse, error)
}

// UnimplementedFortissimoServer can be embedded to have forward compatible implementations.
type UnimplementedFortissimoServer struct {
}

func (*UnimplementedFortissimoServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (*UnimplementedFortissimoServer) GetSongs(*GetSongsRequest, Fortissimo_GetSongsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (*UnimplementedFortissimoServer) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (*UnimplementedFortissimoServer) RemoveSong(context.Context, *RemoveSongRequest) (*RemoveSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSong not implemented")
}

func RegisterFortissimoServer(s *grpc.Server, srv FortissimoServer) {
	s.RegisterService(&_Fortissimo_serviceDesc, srv)
}

func _Fortissimo_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortissimoServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fortissimo.Fortissimo/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortissimoServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fortissimo_GetSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSongsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FortissimoServer).GetSongs(m, &fortissimoGetSongsServer{stream})
}

type Fortissimo_GetSongsServer interface {
	Send(*GetSongsResponse) error
	grpc.ServerStream
}

type fortissimoGetSongsServer struct {
	grpc.ServerStream
}

func (x *fortissimoGetSongsServer) Send(m *GetSongsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fortissimo_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortissimoServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fortissimo.Fortissimo/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortissimoServer).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fortissimo_RemoveSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortissimoServer).RemoveSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fortissimo.Fortissimo/RemoveSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortissimoServer).RemoveSong(ctx, req.(*RemoveSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fortissimo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Fortissimo.Fortissimo",
	HandlerType: (*FortissimoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSong",
			Handler:    _Fortissimo_GetSong_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _Fortissimo_AddSong_Handler,
		},
		{
			MethodName: "RemoveSong",
			Handler:    _Fortissimo_RemoveSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSongs",
			Handler:       _Fortissimo_GetSongs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fortissimo.proto",
}
