// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fortissimo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fortissimo.Protobuf.Library {

  /// <summary>Holder for reflection information generated from fortissimo.proto</summary>
  public static partial class FortissimoReflection {

    #region Descriptor
    /// <summary>File descriptor for fortissimo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FortissimoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBmb3J0aXNzaW1vLnByb3RvEgpGb3J0aXNzaW1vGh9nb29nbGUvcHJvdG9i",
            "dWYvdGltZXN0YW1wLnByb3RvIhwKDkdldFNvbmdSZXF1ZXN0EgoKAmlkGAEg",
            "ASgDIjEKD0dldFNvbmdSZXNwb25zZRIeCgRzb25nGAEgASgLMhAuRm9ydGlz",
            "c2ltby5Tb25nIjAKDkFkZFNvbmdSZXF1ZXN0Eh4KBHNvbmcYASABKAsyEC5G",
            "b3J0aXNzaW1vLlNvbmciMQoPQWRkU29uZ1Jlc3BvbnNlEh4KBHNvbmcYASAB",
            "KAsyEC5Gb3J0aXNzaW1vLlNvbmciHwoRUmVtb3ZlU29uZ1JlcXVlc3QSCgoC",
            "aWQYASABKAMiFAoSUmVtb3ZlU29uZ1Jlc3BvbnNlIhEKD0dldFNvbmdzUmVx",
            "dWVzdCIyChBHZXRTb25nc1Jlc3BvbnNlEh4KBHNvbmcYASABKAsyEC5Gb3J0",
            "aXNzaW1vLlNvbmci5goKBFNvbmcSCgoCaWQYASABKAMSDQoFdGl0bGUYAiAB",
            "KAkSEgoKdGl0bGVfc29ydBgDIAEoCRIPCgdhcnRpc3RzGAQgAygJEhQKDGZp",
            "cnN0X2FydGlzdBgFIAEoCRIZChFmaXJzdF9hcnRpc3Rfc29ydBgGIAEoCRIa",
            "ChJmaXJzdF9hbGJ1bV9hcnRpc3QYByABKAkSHwoXZmlyc3RfYWxidW1fYXJ0",
            "aXN0X3NvcnQYCCABKAkSFAoMYWxidW1fYXJ0aXN0GAkgASgJEg0KBWFsYnVt",
            "GAogASgJEhEKCXB1Ymxpc2hlchgLIAEoCRIWCg5maXJzdF9jb21wb3NlchgM",
            "IAEoCRIRCgljb21wb3NlcnMYDSABKAkSEQoJY29uZHVjdG9yGA4gASgJEg0K",
            "BWdlbnJlGA8gASgJEhAKCGdyb3VwaW5nGBAgASgJEgwKBHllYXIYESABKA0S",
            "FAoMdHJhY2tfbnVtYmVyGBIgASgNEhcKD29mX3RyYWNrX251bWJlchgTIAEo",
            "DRITCgtkaXNrX251bWJlchgUIAEoDRIWCg5vZl9kaXNrX251bWJlchgVIAEo",
            "DRIQCghkdXJhdGlvbhgWIAEoDRISCgpwbGF5X2NvdW50GBcgASgNEhUKDXNr",
            "aXBwZWRfY291bnQYGCABKA0SDwoHY29tbWVudBgZIAEoCRIYChBiZWF0c19w",
            "ZXJfbWludXRlGBogASgNEhEKCWNvcHlyaWdodBgbIAEoCRIvCgtkYXRlX3Rh",
            "Z2dlZBgcIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLZGVz",
            "Y3JpcHRpb24YHSABKAkSGwoTZmlyc3RfY29tcG9zZXJfc29ydBgeIAEoCRIU",
            "CgxhcnRpc3RzX3NvcnQYHyABKAkSDgoGbHlyaWNzGCAgASgJEhMKC2luaXRp",
            "YWxfa2V5GCEgASgJEgwKBGlzcmMYIiABKAkSEAoIc3VidGl0bGUYIyABKAkS",
            "HgoWbXVzaWNfYnJhaW56X2FydGlzdF9pZBgkIAEoCRIcChRtdXNpY19icmFp",
            "bnpfZGlzY19pZBglIAEoCRImCh5tdXNpY19icmFpbnpfcmVsZWFzZV9hcnRp",
            "c3RfaWQYJiABKAkSJAocbXVzaWNfYnJhaW56X3JlbGVhc2VfY291bnRyeRgn",
            "IAEoCRIlCh1tdXNpY19icmFpbnpfcmVsZWFzZV9ncm91cF9pZBgoIAEoCRIf",
            "ChdtdXNpY19icmFpbnpfcmVsZWFzZV9pZBgpIAEoCRIjChttdXNpY19icmFp",
            "bnpfcmVsZWFzZV9zdGF0dXMYKiABKAkSIQoZbXVzaWNfYnJhaW56X3JlbGVh",
            "c2VfdHlwZRgrIAEoCRIdChVtdXNpY19icmFpbnpfdHJhY2tfaWQYLCABKAkS",
            "EwoLbXVzaWNfaXBfaWQYLSABKAkSEgoKcmVtaXhlZF9ieRguIAEoCRIeChZy",
            "ZXBsYXlfZ2Fpbl9hbGJ1bV9nYWluGC8gASgBEh4KFnJlcGxheV9nYWluX2Fs",
            "YnVtX3BlYWsYMCABKAESHgoWcmVwbGF5X2dhaW5fdHJhY2tfZ2FpbhgxIAEo",
            "ARIeChZyZXBsYXlfZ2Fpbl90cmFja19wZWFrGDIgASgBEhEKCW1pbWVfdHlw",
            "ZRgzIAEoCRIMCgRwYXRoGDQgASgJEgwKBGhhc2gYNSABKAkSMAoMY3JlYXRl",
            "ZF9kYXRlGDYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1t",
            "b2RpZmllZF9kYXRlGDcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cDKqAgoKRm9ydGlzc2ltbxJCCgdHZXRTb25nEhouRm9ydGlzc2ltby5HZXRT",
            "b25nUmVxdWVzdBobLkZvcnRpc3NpbW8uR2V0U29uZ1Jlc3BvbnNlEkcKCEdl",
            "dFNvbmdzEhsuRm9ydGlzc2ltby5HZXRTb25nc1JlcXVlc3QaHC5Gb3J0aXNz",
            "aW1vLkdldFNvbmdzUmVzcG9uc2UwARJCCgdBZGRTb25nEhouRm9ydGlzc2lt",
            "by5BZGRTb25nUmVxdWVzdBobLkZvcnRpc3NpbW8uQWRkU29uZ1Jlc3BvbnNl",
            "EksKClJlbW92ZVNvbmcSHS5Gb3J0aXNzaW1vLlJlbW92ZVNvbmdSZXF1ZXN0",
            "Gh4uRm9ydGlzc2ltby5SZW1vdmVTb25nUmVzcG9uc2VCVVo1Z2l0aHViLmNv",
            "bS9qZWZmc3ZhamxlbmtvL2ZvcnRpc3NpbW8vYXBpL2dvL2ZvcnRpc3NpbW+q",
            "AhtGb3J0aXNzaW1vLlByb3RvYnVmLkxpYnJhcnliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.GetSongRequest), global::Fortissimo.Protobuf.Library.GetSongRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.GetSongResponse), global::Fortissimo.Protobuf.Library.GetSongResponse.Parser, new[]{ "Song" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.AddSongRequest), global::Fortissimo.Protobuf.Library.AddSongRequest.Parser, new[]{ "Song" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.AddSongResponse), global::Fortissimo.Protobuf.Library.AddSongResponse.Parser, new[]{ "Song" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.RemoveSongRequest), global::Fortissimo.Protobuf.Library.RemoveSongRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.RemoveSongResponse), global::Fortissimo.Protobuf.Library.RemoveSongResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.GetSongsRequest), global::Fortissimo.Protobuf.Library.GetSongsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.GetSongsResponse), global::Fortissimo.Protobuf.Library.GetSongsResponse.Parser, new[]{ "Song" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Fortissimo.Protobuf.Library.Song), global::Fortissimo.Protobuf.Library.Song.Parser, new[]{ "Id", "Title", "TitleSort", "Artists", "FirstArtist", "FirstArtistSort", "FirstAlbumArtist", "FirstAlbumArtistSort", "AlbumArtist", "Album", "Publisher", "FirstComposer", "Composers", "Conductor", "Genre", "Grouping", "Year", "TrackNumber", "OfTrackNumber", "DiskNumber", "OfDiskNumber", "Duration", "PlayCount", "SkippedCount", "Comment", "BeatsPerMinute", "Copyright", "DateTagged", "Description", "FirstComposerSort", "ArtistsSort", "Lyrics", "InitialKey", "Isrc", "Subtitle", "MusicBrainzArtistId", "MusicBrainzDiscId", "MusicBrainzReleaseArtistId", "MusicBrainzReleaseCountry", "MusicBrainzReleaseGroupId", "MusicBrainzReleaseId", "MusicBrainzReleaseStatus", "MusicBrainzReleaseType", "MusicBrainzTrackId", "MusicIpId", "RemixedBy", "ReplayGainAlbumGain", "ReplayGainAlbumPeak", "ReplayGainTrackGain", "ReplayGainTrackPeak", "MimeType", "Path", "Hash", "CreatedDate", "ModifiedDate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// GetSong
  /// </summary>
  public sealed partial class GetSongRequest : pb::IMessage<GetSongRequest> {
    private static readonly pb::MessageParser<GetSongRequest> _parser = new pb::MessageParser<GetSongRequest>(() => new GetSongRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSongRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongRequest(GetSongRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongRequest Clone() {
      return new GetSongRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSongRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSongRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSongRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSongResponse : pb::IMessage<GetSongResponse> {
    private static readonly pb::MessageParser<GetSongResponse> _parser = new pb::MessageParser<GetSongResponse>(() => new GetSongResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSongResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongResponse(GetSongResponse other) : this() {
      song_ = other.song_ != null ? other.song_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongResponse Clone() {
      return new GetSongResponse(this);
    }

    /// <summary>Field number for the "song" field.</summary>
    public const int SongFieldNumber = 1;
    private global::Fortissimo.Protobuf.Library.Song song_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fortissimo.Protobuf.Library.Song Song {
      get { return song_; }
      set {
        song_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSongResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSongResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Song, other.Song)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (song_ != null) hash ^= Song.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (song_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Song);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (song_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Song);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSongResponse other) {
      if (other == null) {
        return;
      }
      if (other.song_ != null) {
        if (song_ == null) {
          Song = new global::Fortissimo.Protobuf.Library.Song();
        }
        Song.MergeFrom(other.Song);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (song_ == null) {
              Song = new global::Fortissimo.Protobuf.Library.Song();
            }
            input.ReadMessage(Song);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AddSong
  /// </summary>
  public sealed partial class AddSongRequest : pb::IMessage<AddSongRequest> {
    private static readonly pb::MessageParser<AddSongRequest> _parser = new pb::MessageParser<AddSongRequest>(() => new AddSongRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSongRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongRequest(AddSongRequest other) : this() {
      song_ = other.song_ != null ? other.song_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongRequest Clone() {
      return new AddSongRequest(this);
    }

    /// <summary>Field number for the "song" field.</summary>
    public const int SongFieldNumber = 1;
    private global::Fortissimo.Protobuf.Library.Song song_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fortissimo.Protobuf.Library.Song Song {
      get { return song_; }
      set {
        song_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSongRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSongRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Song, other.Song)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (song_ != null) hash ^= Song.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (song_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Song);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (song_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Song);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSongRequest other) {
      if (other == null) {
        return;
      }
      if (other.song_ != null) {
        if (song_ == null) {
          Song = new global::Fortissimo.Protobuf.Library.Song();
        }
        Song.MergeFrom(other.Song);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (song_ == null) {
              Song = new global::Fortissimo.Protobuf.Library.Song();
            }
            input.ReadMessage(Song);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddSongResponse : pb::IMessage<AddSongResponse> {
    private static readonly pb::MessageParser<AddSongResponse> _parser = new pb::MessageParser<AddSongResponse>(() => new AddSongResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSongResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongResponse(AddSongResponse other) : this() {
      song_ = other.song_ != null ? other.song_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSongResponse Clone() {
      return new AddSongResponse(this);
    }

    /// <summary>Field number for the "song" field.</summary>
    public const int SongFieldNumber = 1;
    private global::Fortissimo.Protobuf.Library.Song song_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fortissimo.Protobuf.Library.Song Song {
      get { return song_; }
      set {
        song_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSongResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSongResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Song, other.Song)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (song_ != null) hash ^= Song.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (song_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Song);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (song_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Song);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSongResponse other) {
      if (other == null) {
        return;
      }
      if (other.song_ != null) {
        if (song_ == null) {
          Song = new global::Fortissimo.Protobuf.Library.Song();
        }
        Song.MergeFrom(other.Song);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (song_ == null) {
              Song = new global::Fortissimo.Protobuf.Library.Song();
            }
            input.ReadMessage(Song);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RemoveSong
  /// </summary>
  public sealed partial class RemoveSongRequest : pb::IMessage<RemoveSongRequest> {
    private static readonly pb::MessageParser<RemoveSongRequest> _parser = new pb::MessageParser<RemoveSongRequest>(() => new RemoveSongRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSongRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongRequest(RemoveSongRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongRequest Clone() {
      return new RemoveSongRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSongRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSongRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSongRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSongResponse : pb::IMessage<RemoveSongResponse> {
    private static readonly pb::MessageParser<RemoveSongResponse> _parser = new pb::MessageParser<RemoveSongResponse>(() => new RemoveSongResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSongResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongResponse(RemoveSongResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongResponse Clone() {
      return new RemoveSongResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSongResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSongResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSongResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// GetSongs
  /// </summary>
  public sealed partial class GetSongsRequest : pb::IMessage<GetSongsRequest> {
    private static readonly pb::MessageParser<GetSongsRequest> _parser = new pb::MessageParser<GetSongsRequest>(() => new GetSongsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSongsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsRequest(GetSongsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsRequest Clone() {
      return new GetSongsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSongsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSongsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSongsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetSongsResponse : pb::IMessage<GetSongsResponse> {
    private static readonly pb::MessageParser<GetSongsResponse> _parser = new pb::MessageParser<GetSongsResponse>(() => new GetSongsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSongsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsResponse(GetSongsResponse other) : this() {
      song_ = other.song_ != null ? other.song_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSongsResponse Clone() {
      return new GetSongsResponse(this);
    }

    /// <summary>Field number for the "song" field.</summary>
    public const int SongFieldNumber = 1;
    private global::Fortissimo.Protobuf.Library.Song song_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fortissimo.Protobuf.Library.Song Song {
      get { return song_; }
      set {
        song_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSongsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSongsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Song, other.Song)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (song_ != null) hash ^= Song.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (song_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Song);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (song_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Song);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSongsResponse other) {
      if (other == null) {
        return;
      }
      if (other.song_ != null) {
        if (song_ == null) {
          Song = new global::Fortissimo.Protobuf.Library.Song();
        }
        Song.MergeFrom(other.Song);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (song_ == null) {
              Song = new global::Fortissimo.Protobuf.Library.Song();
            }
            input.ReadMessage(Song);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data Objects
  /// </summary>
  public sealed partial class Song : pb::IMessage<Song> {
    private static readonly pb::MessageParser<Song> _parser = new pb::MessageParser<Song>(() => new Song());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Song> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fortissimo.Protobuf.Library.FortissimoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song(Song other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      titleSort_ = other.titleSort_;
      artists_ = other.artists_.Clone();
      firstArtist_ = other.firstArtist_;
      firstArtistSort_ = other.firstArtistSort_;
      firstAlbumArtist_ = other.firstAlbumArtist_;
      firstAlbumArtistSort_ = other.firstAlbumArtistSort_;
      albumArtist_ = other.albumArtist_;
      album_ = other.album_;
      publisher_ = other.publisher_;
      firstComposer_ = other.firstComposer_;
      composers_ = other.composers_;
      conductor_ = other.conductor_;
      genre_ = other.genre_;
      grouping_ = other.grouping_;
      year_ = other.year_;
      trackNumber_ = other.trackNumber_;
      ofTrackNumber_ = other.ofTrackNumber_;
      diskNumber_ = other.diskNumber_;
      ofDiskNumber_ = other.ofDiskNumber_;
      duration_ = other.duration_;
      playCount_ = other.playCount_;
      skippedCount_ = other.skippedCount_;
      comment_ = other.comment_;
      beatsPerMinute_ = other.beatsPerMinute_;
      copyright_ = other.copyright_;
      dateTagged_ = other.dateTagged_ != null ? other.dateTagged_.Clone() : null;
      description_ = other.description_;
      firstComposerSort_ = other.firstComposerSort_;
      artistsSort_ = other.artistsSort_;
      lyrics_ = other.lyrics_;
      initialKey_ = other.initialKey_;
      isrc_ = other.isrc_;
      subtitle_ = other.subtitle_;
      musicBrainzArtistId_ = other.musicBrainzArtistId_;
      musicBrainzDiscId_ = other.musicBrainzDiscId_;
      musicBrainzReleaseArtistId_ = other.musicBrainzReleaseArtistId_;
      musicBrainzReleaseCountry_ = other.musicBrainzReleaseCountry_;
      musicBrainzReleaseGroupId_ = other.musicBrainzReleaseGroupId_;
      musicBrainzReleaseId_ = other.musicBrainzReleaseId_;
      musicBrainzReleaseStatus_ = other.musicBrainzReleaseStatus_;
      musicBrainzReleaseType_ = other.musicBrainzReleaseType_;
      musicBrainzTrackId_ = other.musicBrainzTrackId_;
      musicIpId_ = other.musicIpId_;
      remixedBy_ = other.remixedBy_;
      replayGainAlbumGain_ = other.replayGainAlbumGain_;
      replayGainAlbumPeak_ = other.replayGainAlbumPeak_;
      replayGainTrackGain_ = other.replayGainTrackGain_;
      replayGainTrackPeak_ = other.replayGainTrackPeak_;
      mimeType_ = other.mimeType_;
      path_ = other.path_;
      hash_ = other.hash_;
      createdDate_ = other.createdDate_ != null ? other.createdDate_.Clone() : null;
      modifiedDate_ = other.modifiedDate_ != null ? other.modifiedDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song Clone() {
      return new Song(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_sort" field.</summary>
    public const int TitleSortFieldNumber = 3;
    private string titleSort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleSort {
      get { return titleSort_; }
      set {
        titleSort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artists" field.</summary>
    public const int ArtistsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_artists_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> artists_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Artists {
      get { return artists_; }
    }

    /// <summary>Field number for the "first_artist" field.</summary>
    public const int FirstArtistFieldNumber = 5;
    private string firstArtist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstArtist {
      get { return firstArtist_; }
      set {
        firstArtist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_artist_sort" field.</summary>
    public const int FirstArtistSortFieldNumber = 6;
    private string firstArtistSort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstArtistSort {
      get { return firstArtistSort_; }
      set {
        firstArtistSort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_album_artist" field.</summary>
    public const int FirstAlbumArtistFieldNumber = 7;
    private string firstAlbumArtist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstAlbumArtist {
      get { return firstAlbumArtist_; }
      set {
        firstAlbumArtist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_album_artist_sort" field.</summary>
    public const int FirstAlbumArtistSortFieldNumber = 8;
    private string firstAlbumArtistSort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstAlbumArtistSort {
      get { return firstAlbumArtistSort_; }
      set {
        firstAlbumArtistSort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "album_artist" field.</summary>
    public const int AlbumArtistFieldNumber = 9;
    private string albumArtist_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlbumArtist {
      get { return albumArtist_; }
      set {
        albumArtist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "album" field.</summary>
    public const int AlbumFieldNumber = 10;
    private string album_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Album {
      get { return album_; }
      set {
        album_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher" field.</summary>
    public const int PublisherFieldNumber = 11;
    private string publisher_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publisher {
      get { return publisher_; }
      set {
        publisher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_composer" field.</summary>
    public const int FirstComposerFieldNumber = 12;
    private string firstComposer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstComposer {
      get { return firstComposer_; }
      set {
        firstComposer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "composers" field.</summary>
    public const int ComposersFieldNumber = 13;
    private string composers_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Composers {
      get { return composers_; }
      set {
        composers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conductor" field.</summary>
    public const int ConductorFieldNumber = 14;
    private string conductor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Conductor {
      get { return conductor_; }
      set {
        conductor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 15;
    private string genre_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Genre {
      get { return genre_; }
      set {
        genre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grouping" field.</summary>
    public const int GroupingFieldNumber = 16;
    private string grouping_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grouping {
      get { return grouping_; }
      set {
        grouping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 17;
    private uint year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "track_number" field.</summary>
    public const int TrackNumberFieldNumber = 18;
    private uint trackNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrackNumber {
      get { return trackNumber_; }
      set {
        trackNumber_ = value;
      }
    }

    /// <summary>Field number for the "of_track_number" field.</summary>
    public const int OfTrackNumberFieldNumber = 19;
    private uint ofTrackNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OfTrackNumber {
      get { return ofTrackNumber_; }
      set {
        ofTrackNumber_ = value;
      }
    }

    /// <summary>Field number for the "disk_number" field.</summary>
    public const int DiskNumberFieldNumber = 20;
    private uint diskNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiskNumber {
      get { return diskNumber_; }
      set {
        diskNumber_ = value;
      }
    }

    /// <summary>Field number for the "of_disk_number" field.</summary>
    public const int OfDiskNumberFieldNumber = 21;
    private uint ofDiskNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OfDiskNumber {
      get { return ofDiskNumber_; }
      set {
        ofDiskNumber_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 22;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "play_count" field.</summary>
    public const int PlayCountFieldNumber = 23;
    private uint playCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayCount {
      get { return playCount_; }
      set {
        playCount_ = value;
      }
    }

    /// <summary>Field number for the "skipped_count" field.</summary>
    public const int SkippedCountFieldNumber = 24;
    private uint skippedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkippedCount {
      get { return skippedCount_; }
      set {
        skippedCount_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 25;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beats_per_minute" field.</summary>
    public const int BeatsPerMinuteFieldNumber = 26;
    private uint beatsPerMinute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeatsPerMinute {
      get { return beatsPerMinute_; }
      set {
        beatsPerMinute_ = value;
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 27;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date_tagged" field.</summary>
    public const int DateTaggedFieldNumber = 28;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateTagged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateTagged {
      get { return dateTagged_; }
      set {
        dateTagged_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 29;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_composer_sort" field.</summary>
    public const int FirstComposerSortFieldNumber = 30;
    private string firstComposerSort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstComposerSort {
      get { return firstComposerSort_; }
      set {
        firstComposerSort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artists_sort" field.</summary>
    public const int ArtistsSortFieldNumber = 31;
    private string artistsSort_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtistsSort {
      get { return artistsSort_; }
      set {
        artistsSort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lyrics" field.</summary>
    public const int LyricsFieldNumber = 32;
    private string lyrics_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lyrics {
      get { return lyrics_; }
      set {
        lyrics_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initial_key" field.</summary>
    public const int InitialKeyFieldNumber = 33;
    private string initialKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitialKey {
      get { return initialKey_; }
      set {
        initialKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isrc" field.</summary>
    public const int IsrcFieldNumber = 34;
    private string isrc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Isrc {
      get { return isrc_; }
      set {
        isrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subtitle" field.</summary>
    public const int SubtitleFieldNumber = 35;
    private string subtitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subtitle {
      get { return subtitle_; }
      set {
        subtitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_artist_id" field.</summary>
    public const int MusicBrainzArtistIdFieldNumber = 36;
    private string musicBrainzArtistId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzArtistId {
      get { return musicBrainzArtistId_; }
      set {
        musicBrainzArtistId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_disc_id" field.</summary>
    public const int MusicBrainzDiscIdFieldNumber = 37;
    private string musicBrainzDiscId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzDiscId {
      get { return musicBrainzDiscId_; }
      set {
        musicBrainzDiscId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_artist_id" field.</summary>
    public const int MusicBrainzReleaseArtistIdFieldNumber = 38;
    private string musicBrainzReleaseArtistId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseArtistId {
      get { return musicBrainzReleaseArtistId_; }
      set {
        musicBrainzReleaseArtistId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_country" field.</summary>
    public const int MusicBrainzReleaseCountryFieldNumber = 39;
    private string musicBrainzReleaseCountry_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseCountry {
      get { return musicBrainzReleaseCountry_; }
      set {
        musicBrainzReleaseCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_group_id" field.</summary>
    public const int MusicBrainzReleaseGroupIdFieldNumber = 40;
    private string musicBrainzReleaseGroupId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseGroupId {
      get { return musicBrainzReleaseGroupId_; }
      set {
        musicBrainzReleaseGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_id" field.</summary>
    public const int MusicBrainzReleaseIdFieldNumber = 41;
    private string musicBrainzReleaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseId {
      get { return musicBrainzReleaseId_; }
      set {
        musicBrainzReleaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_status" field.</summary>
    public const int MusicBrainzReleaseStatusFieldNumber = 42;
    private string musicBrainzReleaseStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseStatus {
      get { return musicBrainzReleaseStatus_; }
      set {
        musicBrainzReleaseStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_release_type" field.</summary>
    public const int MusicBrainzReleaseTypeFieldNumber = 43;
    private string musicBrainzReleaseType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzReleaseType {
      get { return musicBrainzReleaseType_; }
      set {
        musicBrainzReleaseType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_brainz_track_id" field.</summary>
    public const int MusicBrainzTrackIdFieldNumber = 44;
    private string musicBrainzTrackId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicBrainzTrackId {
      get { return musicBrainzTrackId_; }
      set {
        musicBrainzTrackId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "music_ip_id" field.</summary>
    public const int MusicIpIdFieldNumber = 45;
    private string musicIpId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicIpId {
      get { return musicIpId_; }
      set {
        musicIpId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remixed_by" field.</summary>
    public const int RemixedByFieldNumber = 46;
    private string remixedBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemixedBy {
      get { return remixedBy_; }
      set {
        remixedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replay_gain_album_gain" field.</summary>
    public const int ReplayGainAlbumGainFieldNumber = 47;
    private double replayGainAlbumGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReplayGainAlbumGain {
      get { return replayGainAlbumGain_; }
      set {
        replayGainAlbumGain_ = value;
      }
    }

    /// <summary>Field number for the "replay_gain_album_peak" field.</summary>
    public const int ReplayGainAlbumPeakFieldNumber = 48;
    private double replayGainAlbumPeak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReplayGainAlbumPeak {
      get { return replayGainAlbumPeak_; }
      set {
        replayGainAlbumPeak_ = value;
      }
    }

    /// <summary>Field number for the "replay_gain_track_gain" field.</summary>
    public const int ReplayGainTrackGainFieldNumber = 49;
    private double replayGainTrackGain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReplayGainTrackGain {
      get { return replayGainTrackGain_; }
      set {
        replayGainTrackGain_ = value;
      }
    }

    /// <summary>Field number for the "replay_gain_track_peak" field.</summary>
    public const int ReplayGainTrackPeakFieldNumber = 50;
    private double replayGainTrackPeak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReplayGainTrackPeak {
      get { return replayGainTrackPeak_; }
      set {
        replayGainTrackPeak_ = value;
      }
    }

    /// <summary>Field number for the "mime_type" field.</summary>
    public const int MimeTypeFieldNumber = 51;
    private string mimeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 52;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 53;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_date" field.</summary>
    public const int CreatedDateFieldNumber = 54;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedDate {
      get { return createdDate_; }
      set {
        createdDate_ = value;
      }
    }

    /// <summary>Field number for the "modified_date" field.</summary>
    public const int ModifiedDateFieldNumber = 55;
    private global::Google.Protobuf.WellKnownTypes.Timestamp modifiedDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ModifiedDate {
      get { return modifiedDate_; }
      set {
        modifiedDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Song);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Song other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (TitleSort != other.TitleSort) return false;
      if(!artists_.Equals(other.artists_)) return false;
      if (FirstArtist != other.FirstArtist) return false;
      if (FirstArtistSort != other.FirstArtistSort) return false;
      if (FirstAlbumArtist != other.FirstAlbumArtist) return false;
      if (FirstAlbumArtistSort != other.FirstAlbumArtistSort) return false;
      if (AlbumArtist != other.AlbumArtist) return false;
      if (Album != other.Album) return false;
      if (Publisher != other.Publisher) return false;
      if (FirstComposer != other.FirstComposer) return false;
      if (Composers != other.Composers) return false;
      if (Conductor != other.Conductor) return false;
      if (Genre != other.Genre) return false;
      if (Grouping != other.Grouping) return false;
      if (Year != other.Year) return false;
      if (TrackNumber != other.TrackNumber) return false;
      if (OfTrackNumber != other.OfTrackNumber) return false;
      if (DiskNumber != other.DiskNumber) return false;
      if (OfDiskNumber != other.OfDiskNumber) return false;
      if (Duration != other.Duration) return false;
      if (PlayCount != other.PlayCount) return false;
      if (SkippedCount != other.SkippedCount) return false;
      if (Comment != other.Comment) return false;
      if (BeatsPerMinute != other.BeatsPerMinute) return false;
      if (Copyright != other.Copyright) return false;
      if (!object.Equals(DateTagged, other.DateTagged)) return false;
      if (Description != other.Description) return false;
      if (FirstComposerSort != other.FirstComposerSort) return false;
      if (ArtistsSort != other.ArtistsSort) return false;
      if (Lyrics != other.Lyrics) return false;
      if (InitialKey != other.InitialKey) return false;
      if (Isrc != other.Isrc) return false;
      if (Subtitle != other.Subtitle) return false;
      if (MusicBrainzArtistId != other.MusicBrainzArtistId) return false;
      if (MusicBrainzDiscId != other.MusicBrainzDiscId) return false;
      if (MusicBrainzReleaseArtistId != other.MusicBrainzReleaseArtistId) return false;
      if (MusicBrainzReleaseCountry != other.MusicBrainzReleaseCountry) return false;
      if (MusicBrainzReleaseGroupId != other.MusicBrainzReleaseGroupId) return false;
      if (MusicBrainzReleaseId != other.MusicBrainzReleaseId) return false;
      if (MusicBrainzReleaseStatus != other.MusicBrainzReleaseStatus) return false;
      if (MusicBrainzReleaseType != other.MusicBrainzReleaseType) return false;
      if (MusicBrainzTrackId != other.MusicBrainzTrackId) return false;
      if (MusicIpId != other.MusicIpId) return false;
      if (RemixedBy != other.RemixedBy) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReplayGainAlbumGain, other.ReplayGainAlbumGain)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReplayGainAlbumPeak, other.ReplayGainAlbumPeak)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReplayGainTrackGain, other.ReplayGainTrackGain)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReplayGainTrackPeak, other.ReplayGainTrackPeak)) return false;
      if (MimeType != other.MimeType) return false;
      if (Path != other.Path) return false;
      if (Hash != other.Hash) return false;
      if (!object.Equals(CreatedDate, other.CreatedDate)) return false;
      if (!object.Equals(ModifiedDate, other.ModifiedDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (TitleSort.Length != 0) hash ^= TitleSort.GetHashCode();
      hash ^= artists_.GetHashCode();
      if (FirstArtist.Length != 0) hash ^= FirstArtist.GetHashCode();
      if (FirstArtistSort.Length != 0) hash ^= FirstArtistSort.GetHashCode();
      if (FirstAlbumArtist.Length != 0) hash ^= FirstAlbumArtist.GetHashCode();
      if (FirstAlbumArtistSort.Length != 0) hash ^= FirstAlbumArtistSort.GetHashCode();
      if (AlbumArtist.Length != 0) hash ^= AlbumArtist.GetHashCode();
      if (Album.Length != 0) hash ^= Album.GetHashCode();
      if (Publisher.Length != 0) hash ^= Publisher.GetHashCode();
      if (FirstComposer.Length != 0) hash ^= FirstComposer.GetHashCode();
      if (Composers.Length != 0) hash ^= Composers.GetHashCode();
      if (Conductor.Length != 0) hash ^= Conductor.GetHashCode();
      if (Genre.Length != 0) hash ^= Genre.GetHashCode();
      if (Grouping.Length != 0) hash ^= Grouping.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (TrackNumber != 0) hash ^= TrackNumber.GetHashCode();
      if (OfTrackNumber != 0) hash ^= OfTrackNumber.GetHashCode();
      if (DiskNumber != 0) hash ^= DiskNumber.GetHashCode();
      if (OfDiskNumber != 0) hash ^= OfDiskNumber.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (PlayCount != 0) hash ^= PlayCount.GetHashCode();
      if (SkippedCount != 0) hash ^= SkippedCount.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (BeatsPerMinute != 0) hash ^= BeatsPerMinute.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (dateTagged_ != null) hash ^= DateTagged.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FirstComposerSort.Length != 0) hash ^= FirstComposerSort.GetHashCode();
      if (ArtistsSort.Length != 0) hash ^= ArtistsSort.GetHashCode();
      if (Lyrics.Length != 0) hash ^= Lyrics.GetHashCode();
      if (InitialKey.Length != 0) hash ^= InitialKey.GetHashCode();
      if (Isrc.Length != 0) hash ^= Isrc.GetHashCode();
      if (Subtitle.Length != 0) hash ^= Subtitle.GetHashCode();
      if (MusicBrainzArtistId.Length != 0) hash ^= MusicBrainzArtistId.GetHashCode();
      if (MusicBrainzDiscId.Length != 0) hash ^= MusicBrainzDiscId.GetHashCode();
      if (MusicBrainzReleaseArtistId.Length != 0) hash ^= MusicBrainzReleaseArtistId.GetHashCode();
      if (MusicBrainzReleaseCountry.Length != 0) hash ^= MusicBrainzReleaseCountry.GetHashCode();
      if (MusicBrainzReleaseGroupId.Length != 0) hash ^= MusicBrainzReleaseGroupId.GetHashCode();
      if (MusicBrainzReleaseId.Length != 0) hash ^= MusicBrainzReleaseId.GetHashCode();
      if (MusicBrainzReleaseStatus.Length != 0) hash ^= MusicBrainzReleaseStatus.GetHashCode();
      if (MusicBrainzReleaseType.Length != 0) hash ^= MusicBrainzReleaseType.GetHashCode();
      if (MusicBrainzTrackId.Length != 0) hash ^= MusicBrainzTrackId.GetHashCode();
      if (MusicIpId.Length != 0) hash ^= MusicIpId.GetHashCode();
      if (RemixedBy.Length != 0) hash ^= RemixedBy.GetHashCode();
      if (ReplayGainAlbumGain != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReplayGainAlbumGain);
      if (ReplayGainAlbumPeak != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReplayGainAlbumPeak);
      if (ReplayGainTrackGain != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReplayGainTrackGain);
      if (ReplayGainTrackPeak != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReplayGainTrackPeak);
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (createdDate_ != null) hash ^= CreatedDate.GetHashCode();
      if (modifiedDate_ != null) hash ^= ModifiedDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (TitleSort.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TitleSort);
      }
      artists_.WriteTo(output, _repeated_artists_codec);
      if (FirstArtist.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FirstArtist);
      }
      if (FirstArtistSort.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirstArtistSort);
      }
      if (FirstAlbumArtist.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstAlbumArtist);
      }
      if (FirstAlbumArtistSort.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FirstAlbumArtistSort);
      }
      if (AlbumArtist.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AlbumArtist);
      }
      if (Album.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Album);
      }
      if (Publisher.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Publisher);
      }
      if (FirstComposer.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FirstComposer);
      }
      if (Composers.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Composers);
      }
      if (Conductor.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Conductor);
      }
      if (Genre.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Genre);
      }
      if (Grouping.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Grouping);
      }
      if (Year != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Year);
      }
      if (TrackNumber != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TrackNumber);
      }
      if (OfTrackNumber != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(OfTrackNumber);
      }
      if (DiskNumber != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(DiskNumber);
      }
      if (OfDiskNumber != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(OfDiskNumber);
      }
      if (Duration != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Duration);
      }
      if (PlayCount != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PlayCount);
      }
      if (SkippedCount != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(SkippedCount);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Comment);
      }
      if (BeatsPerMinute != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(BeatsPerMinute);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Copyright);
      }
      if (dateTagged_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(DateTagged);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Description);
      }
      if (FirstComposerSort.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(FirstComposerSort);
      }
      if (ArtistsSort.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(ArtistsSort);
      }
      if (Lyrics.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Lyrics);
      }
      if (InitialKey.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(InitialKey);
      }
      if (Isrc.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Isrc);
      }
      if (Subtitle.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(Subtitle);
      }
      if (MusicBrainzArtistId.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(MusicBrainzArtistId);
      }
      if (MusicBrainzDiscId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(MusicBrainzDiscId);
      }
      if (MusicBrainzReleaseArtistId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(MusicBrainzReleaseArtistId);
      }
      if (MusicBrainzReleaseCountry.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(MusicBrainzReleaseCountry);
      }
      if (MusicBrainzReleaseGroupId.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(MusicBrainzReleaseGroupId);
      }
      if (MusicBrainzReleaseId.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(MusicBrainzReleaseId);
      }
      if (MusicBrainzReleaseStatus.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(MusicBrainzReleaseStatus);
      }
      if (MusicBrainzReleaseType.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(MusicBrainzReleaseType);
      }
      if (MusicBrainzTrackId.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(MusicBrainzTrackId);
      }
      if (MusicIpId.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(MusicIpId);
      }
      if (RemixedBy.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(RemixedBy);
      }
      if (ReplayGainAlbumGain != 0D) {
        output.WriteRawTag(249, 2);
        output.WriteDouble(ReplayGainAlbumGain);
      }
      if (ReplayGainAlbumPeak != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(ReplayGainAlbumPeak);
      }
      if (ReplayGainTrackGain != 0D) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(ReplayGainTrackGain);
      }
      if (ReplayGainTrackPeak != 0D) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(ReplayGainTrackPeak);
      }
      if (MimeType.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(MimeType);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(Path);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(Hash);
      }
      if (createdDate_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(CreatedDate);
      }
      if (modifiedDate_ != null) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(ModifiedDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (TitleSort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleSort);
      }
      size += artists_.CalculateSize(_repeated_artists_codec);
      if (FirstArtist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstArtist);
      }
      if (FirstArtistSort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstArtistSort);
      }
      if (FirstAlbumArtist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstAlbumArtist);
      }
      if (FirstAlbumArtistSort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstAlbumArtistSort);
      }
      if (AlbumArtist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlbumArtist);
      }
      if (Album.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Album);
      }
      if (Publisher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publisher);
      }
      if (FirstComposer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstComposer);
      }
      if (Composers.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Composers);
      }
      if (Conductor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Conductor);
      }
      if (Genre.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Genre);
      }
      if (Grouping.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Grouping);
      }
      if (Year != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Year);
      }
      if (TrackNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TrackNumber);
      }
      if (OfTrackNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OfTrackNumber);
      }
      if (DiskNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DiskNumber);
      }
      if (OfDiskNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OfDiskNumber);
      }
      if (Duration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (PlayCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayCount);
      }
      if (SkippedCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkippedCount);
      }
      if (Comment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (BeatsPerMinute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BeatsPerMinute);
      }
      if (Copyright.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (dateTagged_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DateTagged);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FirstComposerSort.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstComposerSort);
      }
      if (ArtistsSort.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ArtistsSort);
      }
      if (Lyrics.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lyrics);
      }
      if (InitialKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InitialKey);
      }
      if (Isrc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Isrc);
      }
      if (Subtitle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Subtitle);
      }
      if (MusicBrainzArtistId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzArtistId);
      }
      if (MusicBrainzDiscId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzDiscId);
      }
      if (MusicBrainzReleaseArtistId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseArtistId);
      }
      if (MusicBrainzReleaseCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseCountry);
      }
      if (MusicBrainzReleaseGroupId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseGroupId);
      }
      if (MusicBrainzReleaseId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseId);
      }
      if (MusicBrainzReleaseStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseStatus);
      }
      if (MusicBrainzReleaseType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzReleaseType);
      }
      if (MusicBrainzTrackId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicBrainzTrackId);
      }
      if (MusicIpId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicIpId);
      }
      if (RemixedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RemixedBy);
      }
      if (ReplayGainAlbumGain != 0D) {
        size += 2 + 8;
      }
      if (ReplayGainAlbumPeak != 0D) {
        size += 2 + 8;
      }
      if (ReplayGainTrackGain != 0D) {
        size += 2 + 8;
      }
      if (ReplayGainTrackPeak != 0D) {
        size += 2 + 8;
      }
      if (MimeType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (Path.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Hash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (createdDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreatedDate);
      }
      if (modifiedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifiedDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Song other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.TitleSort.Length != 0) {
        TitleSort = other.TitleSort;
      }
      artists_.Add(other.artists_);
      if (other.FirstArtist.Length != 0) {
        FirstArtist = other.FirstArtist;
      }
      if (other.FirstArtistSort.Length != 0) {
        FirstArtistSort = other.FirstArtistSort;
      }
      if (other.FirstAlbumArtist.Length != 0) {
        FirstAlbumArtist = other.FirstAlbumArtist;
      }
      if (other.FirstAlbumArtistSort.Length != 0) {
        FirstAlbumArtistSort = other.FirstAlbumArtistSort;
      }
      if (other.AlbumArtist.Length != 0) {
        AlbumArtist = other.AlbumArtist;
      }
      if (other.Album.Length != 0) {
        Album = other.Album;
      }
      if (other.Publisher.Length != 0) {
        Publisher = other.Publisher;
      }
      if (other.FirstComposer.Length != 0) {
        FirstComposer = other.FirstComposer;
      }
      if (other.Composers.Length != 0) {
        Composers = other.Composers;
      }
      if (other.Conductor.Length != 0) {
        Conductor = other.Conductor;
      }
      if (other.Genre.Length != 0) {
        Genre = other.Genre;
      }
      if (other.Grouping.Length != 0) {
        Grouping = other.Grouping;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.TrackNumber != 0) {
        TrackNumber = other.TrackNumber;
      }
      if (other.OfTrackNumber != 0) {
        OfTrackNumber = other.OfTrackNumber;
      }
      if (other.DiskNumber != 0) {
        DiskNumber = other.DiskNumber;
      }
      if (other.OfDiskNumber != 0) {
        OfDiskNumber = other.OfDiskNumber;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.PlayCount != 0) {
        PlayCount = other.PlayCount;
      }
      if (other.SkippedCount != 0) {
        SkippedCount = other.SkippedCount;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.BeatsPerMinute != 0) {
        BeatsPerMinute = other.BeatsPerMinute;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      if (other.dateTagged_ != null) {
        if (dateTagged_ == null) {
          DateTagged = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateTagged.MergeFrom(other.DateTagged);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FirstComposerSort.Length != 0) {
        FirstComposerSort = other.FirstComposerSort;
      }
      if (other.ArtistsSort.Length != 0) {
        ArtistsSort = other.ArtistsSort;
      }
      if (other.Lyrics.Length != 0) {
        Lyrics = other.Lyrics;
      }
      if (other.InitialKey.Length != 0) {
        InitialKey = other.InitialKey;
      }
      if (other.Isrc.Length != 0) {
        Isrc = other.Isrc;
      }
      if (other.Subtitle.Length != 0) {
        Subtitle = other.Subtitle;
      }
      if (other.MusicBrainzArtistId.Length != 0) {
        MusicBrainzArtistId = other.MusicBrainzArtistId;
      }
      if (other.MusicBrainzDiscId.Length != 0) {
        MusicBrainzDiscId = other.MusicBrainzDiscId;
      }
      if (other.MusicBrainzReleaseArtistId.Length != 0) {
        MusicBrainzReleaseArtistId = other.MusicBrainzReleaseArtistId;
      }
      if (other.MusicBrainzReleaseCountry.Length != 0) {
        MusicBrainzReleaseCountry = other.MusicBrainzReleaseCountry;
      }
      if (other.MusicBrainzReleaseGroupId.Length != 0) {
        MusicBrainzReleaseGroupId = other.MusicBrainzReleaseGroupId;
      }
      if (other.MusicBrainzReleaseId.Length != 0) {
        MusicBrainzReleaseId = other.MusicBrainzReleaseId;
      }
      if (other.MusicBrainzReleaseStatus.Length != 0) {
        MusicBrainzReleaseStatus = other.MusicBrainzReleaseStatus;
      }
      if (other.MusicBrainzReleaseType.Length != 0) {
        MusicBrainzReleaseType = other.MusicBrainzReleaseType;
      }
      if (other.MusicBrainzTrackId.Length != 0) {
        MusicBrainzTrackId = other.MusicBrainzTrackId;
      }
      if (other.MusicIpId.Length != 0) {
        MusicIpId = other.MusicIpId;
      }
      if (other.RemixedBy.Length != 0) {
        RemixedBy = other.RemixedBy;
      }
      if (other.ReplayGainAlbumGain != 0D) {
        ReplayGainAlbumGain = other.ReplayGainAlbumGain;
      }
      if (other.ReplayGainAlbumPeak != 0D) {
        ReplayGainAlbumPeak = other.ReplayGainAlbumPeak;
      }
      if (other.ReplayGainTrackGain != 0D) {
        ReplayGainTrackGain = other.ReplayGainTrackGain;
      }
      if (other.ReplayGainTrackPeak != 0D) {
        ReplayGainTrackPeak = other.ReplayGainTrackPeak;
      }
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.createdDate_ != null) {
        if (createdDate_ == null) {
          CreatedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedDate.MergeFrom(other.CreatedDate);
      }
      if (other.modifiedDate_ != null) {
        if (modifiedDate_ == null) {
          ModifiedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ModifiedDate.MergeFrom(other.ModifiedDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            TitleSort = input.ReadString();
            break;
          }
          case 34: {
            artists_.AddEntriesFrom(input, _repeated_artists_codec);
            break;
          }
          case 42: {
            FirstArtist = input.ReadString();
            break;
          }
          case 50: {
            FirstArtistSort = input.ReadString();
            break;
          }
          case 58: {
            FirstAlbumArtist = input.ReadString();
            break;
          }
          case 66: {
            FirstAlbumArtistSort = input.ReadString();
            break;
          }
          case 74: {
            AlbumArtist = input.ReadString();
            break;
          }
          case 82: {
            Album = input.ReadString();
            break;
          }
          case 90: {
            Publisher = input.ReadString();
            break;
          }
          case 98: {
            FirstComposer = input.ReadString();
            break;
          }
          case 106: {
            Composers = input.ReadString();
            break;
          }
          case 114: {
            Conductor = input.ReadString();
            break;
          }
          case 122: {
            Genre = input.ReadString();
            break;
          }
          case 130: {
            Grouping = input.ReadString();
            break;
          }
          case 136: {
            Year = input.ReadUInt32();
            break;
          }
          case 144: {
            TrackNumber = input.ReadUInt32();
            break;
          }
          case 152: {
            OfTrackNumber = input.ReadUInt32();
            break;
          }
          case 160: {
            DiskNumber = input.ReadUInt32();
            break;
          }
          case 168: {
            OfDiskNumber = input.ReadUInt32();
            break;
          }
          case 176: {
            Duration = input.ReadUInt32();
            break;
          }
          case 184: {
            PlayCount = input.ReadUInt32();
            break;
          }
          case 192: {
            SkippedCount = input.ReadUInt32();
            break;
          }
          case 202: {
            Comment = input.ReadString();
            break;
          }
          case 208: {
            BeatsPerMinute = input.ReadUInt32();
            break;
          }
          case 218: {
            Copyright = input.ReadString();
            break;
          }
          case 226: {
            if (dateTagged_ == null) {
              DateTagged = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DateTagged);
            break;
          }
          case 234: {
            Description = input.ReadString();
            break;
          }
          case 242: {
            FirstComposerSort = input.ReadString();
            break;
          }
          case 250: {
            ArtistsSort = input.ReadString();
            break;
          }
          case 258: {
            Lyrics = input.ReadString();
            break;
          }
          case 266: {
            InitialKey = input.ReadString();
            break;
          }
          case 274: {
            Isrc = input.ReadString();
            break;
          }
          case 282: {
            Subtitle = input.ReadString();
            break;
          }
          case 290: {
            MusicBrainzArtistId = input.ReadString();
            break;
          }
          case 298: {
            MusicBrainzDiscId = input.ReadString();
            break;
          }
          case 306: {
            MusicBrainzReleaseArtistId = input.ReadString();
            break;
          }
          case 314: {
            MusicBrainzReleaseCountry = input.ReadString();
            break;
          }
          case 322: {
            MusicBrainzReleaseGroupId = input.ReadString();
            break;
          }
          case 330: {
            MusicBrainzReleaseId = input.ReadString();
            break;
          }
          case 338: {
            MusicBrainzReleaseStatus = input.ReadString();
            break;
          }
          case 346: {
            MusicBrainzReleaseType = input.ReadString();
            break;
          }
          case 354: {
            MusicBrainzTrackId = input.ReadString();
            break;
          }
          case 362: {
            MusicIpId = input.ReadString();
            break;
          }
          case 370: {
            RemixedBy = input.ReadString();
            break;
          }
          case 377: {
            ReplayGainAlbumGain = input.ReadDouble();
            break;
          }
          case 385: {
            ReplayGainAlbumPeak = input.ReadDouble();
            break;
          }
          case 393: {
            ReplayGainTrackGain = input.ReadDouble();
            break;
          }
          case 401: {
            ReplayGainTrackPeak = input.ReadDouble();
            break;
          }
          case 410: {
            MimeType = input.ReadString();
            break;
          }
          case 418: {
            Path = input.ReadString();
            break;
          }
          case 426: {
            Hash = input.ReadString();
            break;
          }
          case 434: {
            if (createdDate_ == null) {
              CreatedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedDate);
            break;
          }
          case 442: {
            if (modifiedDate_ == null) {
              ModifiedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ModifiedDate);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
