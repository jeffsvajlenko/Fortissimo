// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jeffsvajlenko/fortissimo/server/ent/predicate"
	"github.com/jeffsvajlenko/fortissimo/server/ent/song"
	"github.com/jeffsvajlenko/fortissimo/server/ent/tag"
)

// SongUpdate is the builder for updating Song entities.
type SongUpdate struct {
	config
	hooks      []Hook
	mutation   *SongMutation
	predicates []predicate.Song
}

// Where adds a new predicate for the builder.
func (su *SongUpdate) Where(ps ...predicate.Song) *SongUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetPath sets the path field.
func (su *SongUpdate) SetPath(s string) *SongUpdate {
	su.mutation.SetPath(s)
	return su
}

// SetTitle sets the title field.
func (su *SongUpdate) SetTitle(s string) *SongUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the title field if the given value is not nil.
func (su *SongUpdate) SetNillableTitle(s *string) *SongUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// ClearTitle clears the value of title.
func (su *SongUpdate) ClearTitle() *SongUpdate {
	su.mutation.ClearTitle()
	return su
}

// SetTitleSort sets the title_sort field.
func (su *SongUpdate) SetTitleSort(s string) *SongUpdate {
	su.mutation.SetTitleSort(s)
	return su
}

// SetNillableTitleSort sets the title_sort field if the given value is not nil.
func (su *SongUpdate) SetNillableTitleSort(s *string) *SongUpdate {
	if s != nil {
		su.SetTitleSort(*s)
	}
	return su
}

// ClearTitleSort clears the value of title_sort.
func (su *SongUpdate) ClearTitleSort() *SongUpdate {
	su.mutation.ClearTitleSort()
	return su
}

// SetArtists sets the artists field.
func (su *SongUpdate) SetArtists(s []string) *SongUpdate {
	su.mutation.SetArtists(s)
	return su
}

// ClearArtists clears the value of artists.
func (su *SongUpdate) ClearArtists() *SongUpdate {
	su.mutation.ClearArtists()
	return su
}

// SetFirstArtist sets the first_artist field.
func (su *SongUpdate) SetFirstArtist(s string) *SongUpdate {
	su.mutation.SetFirstArtist(s)
	return su
}

// SetNillableFirstArtist sets the first_artist field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstArtist(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstArtist(*s)
	}
	return su
}

// ClearFirstArtist clears the value of first_artist.
func (su *SongUpdate) ClearFirstArtist() *SongUpdate {
	su.mutation.ClearFirstArtist()
	return su
}

// SetFirstArtistSort sets the first_artist_sort field.
func (su *SongUpdate) SetFirstArtistSort(s string) *SongUpdate {
	su.mutation.SetFirstArtistSort(s)
	return su
}

// SetNillableFirstArtistSort sets the first_artist_sort field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstArtistSort(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstArtistSort(*s)
	}
	return su
}

// ClearFirstArtistSort clears the value of first_artist_sort.
func (su *SongUpdate) ClearFirstArtistSort() *SongUpdate {
	su.mutation.ClearFirstArtistSort()
	return su
}

// SetFirstAlbumArtist sets the first_album_artist field.
func (su *SongUpdate) SetFirstAlbumArtist(s string) *SongUpdate {
	su.mutation.SetFirstAlbumArtist(s)
	return su
}

// SetNillableFirstAlbumArtist sets the first_album_artist field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstAlbumArtist(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstAlbumArtist(*s)
	}
	return su
}

// ClearFirstAlbumArtist clears the value of first_album_artist.
func (su *SongUpdate) ClearFirstAlbumArtist() *SongUpdate {
	su.mutation.ClearFirstAlbumArtist()
	return su
}

// SetFirstAlbumArtistSort sets the first_album_artist_sort field.
func (su *SongUpdate) SetFirstAlbumArtistSort(s string) *SongUpdate {
	su.mutation.SetFirstAlbumArtistSort(s)
	return su
}

// SetNillableFirstAlbumArtistSort sets the first_album_artist_sort field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstAlbumArtistSort(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstAlbumArtistSort(*s)
	}
	return su
}

// ClearFirstAlbumArtistSort clears the value of first_album_artist_sort.
func (su *SongUpdate) ClearFirstAlbumArtistSort() *SongUpdate {
	su.mutation.ClearFirstAlbumArtistSort()
	return su
}

// SetAlbumArtist sets the album_artist field.
func (su *SongUpdate) SetAlbumArtist(s string) *SongUpdate {
	su.mutation.SetAlbumArtist(s)
	return su
}

// SetNillableAlbumArtist sets the album_artist field if the given value is not nil.
func (su *SongUpdate) SetNillableAlbumArtist(s *string) *SongUpdate {
	if s != nil {
		su.SetAlbumArtist(*s)
	}
	return su
}

// ClearAlbumArtist clears the value of album_artist.
func (su *SongUpdate) ClearAlbumArtist() *SongUpdate {
	su.mutation.ClearAlbumArtist()
	return su
}

// SetAlbum sets the album field.
func (su *SongUpdate) SetAlbum(s string) *SongUpdate {
	su.mutation.SetAlbum(s)
	return su
}

// SetNillableAlbum sets the album field if the given value is not nil.
func (su *SongUpdate) SetNillableAlbum(s *string) *SongUpdate {
	if s != nil {
		su.SetAlbum(*s)
	}
	return su
}

// ClearAlbum clears the value of album.
func (su *SongUpdate) ClearAlbum() *SongUpdate {
	su.mutation.ClearAlbum()
	return su
}

// SetPublisher sets the publisher field.
func (su *SongUpdate) SetPublisher(s string) *SongUpdate {
	su.mutation.SetPublisher(s)
	return su
}

// SetNillablePublisher sets the publisher field if the given value is not nil.
func (su *SongUpdate) SetNillablePublisher(s *string) *SongUpdate {
	if s != nil {
		su.SetPublisher(*s)
	}
	return su
}

// ClearPublisher clears the value of publisher.
func (su *SongUpdate) ClearPublisher() *SongUpdate {
	su.mutation.ClearPublisher()
	return su
}

// SetFirstComposer sets the first_composer field.
func (su *SongUpdate) SetFirstComposer(s string) *SongUpdate {
	su.mutation.SetFirstComposer(s)
	return su
}

// SetNillableFirstComposer sets the first_composer field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstComposer(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstComposer(*s)
	}
	return su
}

// ClearFirstComposer clears the value of first_composer.
func (su *SongUpdate) ClearFirstComposer() *SongUpdate {
	su.mutation.ClearFirstComposer()
	return su
}

// SetComposers sets the composers field.
func (su *SongUpdate) SetComposers(s string) *SongUpdate {
	su.mutation.SetComposers(s)
	return su
}

// SetNillableComposers sets the composers field if the given value is not nil.
func (su *SongUpdate) SetNillableComposers(s *string) *SongUpdate {
	if s != nil {
		su.SetComposers(*s)
	}
	return su
}

// ClearComposers clears the value of composers.
func (su *SongUpdate) ClearComposers() *SongUpdate {
	su.mutation.ClearComposers()
	return su
}

// SetConductor sets the conductor field.
func (su *SongUpdate) SetConductor(s string) *SongUpdate {
	su.mutation.SetConductor(s)
	return su
}

// SetNillableConductor sets the conductor field if the given value is not nil.
func (su *SongUpdate) SetNillableConductor(s *string) *SongUpdate {
	if s != nil {
		su.SetConductor(*s)
	}
	return su
}

// ClearConductor clears the value of conductor.
func (su *SongUpdate) ClearConductor() *SongUpdate {
	su.mutation.ClearConductor()
	return su
}

// SetGenre sets the genre field.
func (su *SongUpdate) SetGenre(s string) *SongUpdate {
	su.mutation.SetGenre(s)
	return su
}

// SetNillableGenre sets the genre field if the given value is not nil.
func (su *SongUpdate) SetNillableGenre(s *string) *SongUpdate {
	if s != nil {
		su.SetGenre(*s)
	}
	return su
}

// ClearGenre clears the value of genre.
func (su *SongUpdate) ClearGenre() *SongUpdate {
	su.mutation.ClearGenre()
	return su
}

// SetGrouping sets the grouping field.
func (su *SongUpdate) SetGrouping(s string) *SongUpdate {
	su.mutation.SetGrouping(s)
	return su
}

// SetNillableGrouping sets the grouping field if the given value is not nil.
func (su *SongUpdate) SetNillableGrouping(s *string) *SongUpdate {
	if s != nil {
		su.SetGrouping(*s)
	}
	return su
}

// ClearGrouping clears the value of grouping.
func (su *SongUpdate) ClearGrouping() *SongUpdate {
	su.mutation.ClearGrouping()
	return su
}

// SetYear sets the year field.
func (su *SongUpdate) SetYear(u uint) *SongUpdate {
	su.mutation.ResetYear()
	su.mutation.SetYear(u)
	return su
}

// SetNillableYear sets the year field if the given value is not nil.
func (su *SongUpdate) SetNillableYear(u *uint) *SongUpdate {
	if u != nil {
		su.SetYear(*u)
	}
	return su
}

// AddYear adds u to year.
func (su *SongUpdate) AddYear(u uint) *SongUpdate {
	su.mutation.AddYear(u)
	return su
}

// ClearYear clears the value of year.
func (su *SongUpdate) ClearYear() *SongUpdate {
	su.mutation.ClearYear()
	return su
}

// SetTrackNumber sets the track_number field.
func (su *SongUpdate) SetTrackNumber(u uint) *SongUpdate {
	su.mutation.ResetTrackNumber()
	su.mutation.SetTrackNumber(u)
	return su
}

// SetNillableTrackNumber sets the track_number field if the given value is not nil.
func (su *SongUpdate) SetNillableTrackNumber(u *uint) *SongUpdate {
	if u != nil {
		su.SetTrackNumber(*u)
	}
	return su
}

// AddTrackNumber adds u to track_number.
func (su *SongUpdate) AddTrackNumber(u uint) *SongUpdate {
	su.mutation.AddTrackNumber(u)
	return su
}

// ClearTrackNumber clears the value of track_number.
func (su *SongUpdate) ClearTrackNumber() *SongUpdate {
	su.mutation.ClearTrackNumber()
	return su
}

// SetOfTrackNumber sets the of_track_number field.
func (su *SongUpdate) SetOfTrackNumber(u uint) *SongUpdate {
	su.mutation.ResetOfTrackNumber()
	su.mutation.SetOfTrackNumber(u)
	return su
}

// SetNillableOfTrackNumber sets the of_track_number field if the given value is not nil.
func (su *SongUpdate) SetNillableOfTrackNumber(u *uint) *SongUpdate {
	if u != nil {
		su.SetOfTrackNumber(*u)
	}
	return su
}

// AddOfTrackNumber adds u to of_track_number.
func (su *SongUpdate) AddOfTrackNumber(u uint) *SongUpdate {
	su.mutation.AddOfTrackNumber(u)
	return su
}

// ClearOfTrackNumber clears the value of of_track_number.
func (su *SongUpdate) ClearOfTrackNumber() *SongUpdate {
	su.mutation.ClearOfTrackNumber()
	return su
}

// SetDiskNumber sets the disk_number field.
func (su *SongUpdate) SetDiskNumber(u uint) *SongUpdate {
	su.mutation.ResetDiskNumber()
	su.mutation.SetDiskNumber(u)
	return su
}

// SetNillableDiskNumber sets the disk_number field if the given value is not nil.
func (su *SongUpdate) SetNillableDiskNumber(u *uint) *SongUpdate {
	if u != nil {
		su.SetDiskNumber(*u)
	}
	return su
}

// AddDiskNumber adds u to disk_number.
func (su *SongUpdate) AddDiskNumber(u uint) *SongUpdate {
	su.mutation.AddDiskNumber(u)
	return su
}

// ClearDiskNumber clears the value of disk_number.
func (su *SongUpdate) ClearDiskNumber() *SongUpdate {
	su.mutation.ClearDiskNumber()
	return su
}

// SetOfDiskNumber sets the of_disk_number field.
func (su *SongUpdate) SetOfDiskNumber(u uint) *SongUpdate {
	su.mutation.ResetOfDiskNumber()
	su.mutation.SetOfDiskNumber(u)
	return su
}

// SetNillableOfDiskNumber sets the of_disk_number field if the given value is not nil.
func (su *SongUpdate) SetNillableOfDiskNumber(u *uint) *SongUpdate {
	if u != nil {
		su.SetOfDiskNumber(*u)
	}
	return su
}

// AddOfDiskNumber adds u to of_disk_number.
func (su *SongUpdate) AddOfDiskNumber(u uint) *SongUpdate {
	su.mutation.AddOfDiskNumber(u)
	return su
}

// ClearOfDiskNumber clears the value of of_disk_number.
func (su *SongUpdate) ClearOfDiskNumber() *SongUpdate {
	su.mutation.ClearOfDiskNumber()
	return su
}

// SetDuration sets the duration field.
func (su *SongUpdate) SetDuration(i int) *SongUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(i)
	return su
}

// SetNillableDuration sets the duration field if the given value is not nil.
func (su *SongUpdate) SetNillableDuration(i *int) *SongUpdate {
	if i != nil {
		su.SetDuration(*i)
	}
	return su
}

// AddDuration adds i to duration.
func (su *SongUpdate) AddDuration(i int) *SongUpdate {
	su.mutation.AddDuration(i)
	return su
}

// ClearDuration clears the value of duration.
func (su *SongUpdate) ClearDuration() *SongUpdate {
	su.mutation.ClearDuration()
	return su
}

// SetPlayCount sets the play_count field.
func (su *SongUpdate) SetPlayCount(u uint) *SongUpdate {
	su.mutation.ResetPlayCount()
	su.mutation.SetPlayCount(u)
	return su
}

// SetNillablePlayCount sets the play_count field if the given value is not nil.
func (su *SongUpdate) SetNillablePlayCount(u *uint) *SongUpdate {
	if u != nil {
		su.SetPlayCount(*u)
	}
	return su
}

// AddPlayCount adds u to play_count.
func (su *SongUpdate) AddPlayCount(u uint) *SongUpdate {
	su.mutation.AddPlayCount(u)
	return su
}

// SetSkippedCount sets the skipped_count field.
func (su *SongUpdate) SetSkippedCount(u uint) *SongUpdate {
	su.mutation.ResetSkippedCount()
	su.mutation.SetSkippedCount(u)
	return su
}

// SetNillableSkippedCount sets the skipped_count field if the given value is not nil.
func (su *SongUpdate) SetNillableSkippedCount(u *uint) *SongUpdate {
	if u != nil {
		su.SetSkippedCount(*u)
	}
	return su
}

// AddSkippedCount adds u to skipped_count.
func (su *SongUpdate) AddSkippedCount(u uint) *SongUpdate {
	su.mutation.AddSkippedCount(u)
	return su
}

// SetComment sets the comment field.
func (su *SongUpdate) SetComment(s string) *SongUpdate {
	su.mutation.SetComment(s)
	return su
}

// SetNillableComment sets the comment field if the given value is not nil.
func (su *SongUpdate) SetNillableComment(s *string) *SongUpdate {
	if s != nil {
		su.SetComment(*s)
	}
	return su
}

// ClearComment clears the value of comment.
func (su *SongUpdate) ClearComment() *SongUpdate {
	su.mutation.ClearComment()
	return su
}

// SetBeatsPerMinute sets the beats_per_minute field.
func (su *SongUpdate) SetBeatsPerMinute(u uint) *SongUpdate {
	su.mutation.ResetBeatsPerMinute()
	su.mutation.SetBeatsPerMinute(u)
	return su
}

// SetNillableBeatsPerMinute sets the beats_per_minute field if the given value is not nil.
func (su *SongUpdate) SetNillableBeatsPerMinute(u *uint) *SongUpdate {
	if u != nil {
		su.SetBeatsPerMinute(*u)
	}
	return su
}

// AddBeatsPerMinute adds u to beats_per_minute.
func (su *SongUpdate) AddBeatsPerMinute(u uint) *SongUpdate {
	su.mutation.AddBeatsPerMinute(u)
	return su
}

// ClearBeatsPerMinute clears the value of beats_per_minute.
func (su *SongUpdate) ClearBeatsPerMinute() *SongUpdate {
	su.mutation.ClearBeatsPerMinute()
	return su
}

// SetCopyright sets the copyright field.
func (su *SongUpdate) SetCopyright(s string) *SongUpdate {
	su.mutation.SetCopyright(s)
	return su
}

// SetNillableCopyright sets the copyright field if the given value is not nil.
func (su *SongUpdate) SetNillableCopyright(s *string) *SongUpdate {
	if s != nil {
		su.SetCopyright(*s)
	}
	return su
}

// ClearCopyright clears the value of copyright.
func (su *SongUpdate) ClearCopyright() *SongUpdate {
	su.mutation.ClearCopyright()
	return su
}

// SetDateTagged sets the date_tagged field.
func (su *SongUpdate) SetDateTagged(t time.Time) *SongUpdate {
	su.mutation.SetDateTagged(t)
	return su
}

// SetNillableDateTagged sets the date_tagged field if the given value is not nil.
func (su *SongUpdate) SetNillableDateTagged(t *time.Time) *SongUpdate {
	if t != nil {
		su.SetDateTagged(*t)
	}
	return su
}

// ClearDateTagged clears the value of date_tagged.
func (su *SongUpdate) ClearDateTagged() *SongUpdate {
	su.mutation.ClearDateTagged()
	return su
}

// SetDescription sets the description field.
func (su *SongUpdate) SetDescription(s string) *SongUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the description field if the given value is not nil.
func (su *SongUpdate) SetNillableDescription(s *string) *SongUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of description.
func (su *SongUpdate) ClearDescription() *SongUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetFirstComposerSort sets the first_composer_sort field.
func (su *SongUpdate) SetFirstComposerSort(s string) *SongUpdate {
	su.mutation.SetFirstComposerSort(s)
	return su
}

// SetNillableFirstComposerSort sets the first_composer_sort field if the given value is not nil.
func (su *SongUpdate) SetNillableFirstComposerSort(s *string) *SongUpdate {
	if s != nil {
		su.SetFirstComposerSort(*s)
	}
	return su
}

// ClearFirstComposerSort clears the value of first_composer_sort.
func (su *SongUpdate) ClearFirstComposerSort() *SongUpdate {
	su.mutation.ClearFirstComposerSort()
	return su
}

// SetArtistsSort sets the artists_sort field.
func (su *SongUpdate) SetArtistsSort(s string) *SongUpdate {
	su.mutation.SetArtistsSort(s)
	return su
}

// SetNillableArtistsSort sets the artists_sort field if the given value is not nil.
func (su *SongUpdate) SetNillableArtistsSort(s *string) *SongUpdate {
	if s != nil {
		su.SetArtistsSort(*s)
	}
	return su
}

// ClearArtistsSort clears the value of artists_sort.
func (su *SongUpdate) ClearArtistsSort() *SongUpdate {
	su.mutation.ClearArtistsSort()
	return su
}

// SetLyrics sets the lyrics field.
func (su *SongUpdate) SetLyrics(s string) *SongUpdate {
	su.mutation.SetLyrics(s)
	return su
}

// SetNillableLyrics sets the lyrics field if the given value is not nil.
func (su *SongUpdate) SetNillableLyrics(s *string) *SongUpdate {
	if s != nil {
		su.SetLyrics(*s)
	}
	return su
}

// ClearLyrics clears the value of lyrics.
func (su *SongUpdate) ClearLyrics() *SongUpdate {
	su.mutation.ClearLyrics()
	return su
}

// SetInitialKey sets the initial_key field.
func (su *SongUpdate) SetInitialKey(s string) *SongUpdate {
	su.mutation.SetInitialKey(s)
	return su
}

// SetNillableInitialKey sets the initial_key field if the given value is not nil.
func (su *SongUpdate) SetNillableInitialKey(s *string) *SongUpdate {
	if s != nil {
		su.SetInitialKey(*s)
	}
	return su
}

// ClearInitialKey clears the value of initial_key.
func (su *SongUpdate) ClearInitialKey() *SongUpdate {
	su.mutation.ClearInitialKey()
	return su
}

// SetIsrc sets the isrc field.
func (su *SongUpdate) SetIsrc(s string) *SongUpdate {
	su.mutation.SetIsrc(s)
	return su
}

// SetNillableIsrc sets the isrc field if the given value is not nil.
func (su *SongUpdate) SetNillableIsrc(s *string) *SongUpdate {
	if s != nil {
		su.SetIsrc(*s)
	}
	return su
}

// ClearIsrc clears the value of isrc.
func (su *SongUpdate) ClearIsrc() *SongUpdate {
	su.mutation.ClearIsrc()
	return su
}

// SetSubtitle sets the subtitle field.
func (su *SongUpdate) SetSubtitle(s string) *SongUpdate {
	su.mutation.SetSubtitle(s)
	return su
}

// SetNillableSubtitle sets the subtitle field if the given value is not nil.
func (su *SongUpdate) SetNillableSubtitle(s *string) *SongUpdate {
	if s != nil {
		su.SetSubtitle(*s)
	}
	return su
}

// ClearSubtitle clears the value of subtitle.
func (su *SongUpdate) ClearSubtitle() *SongUpdate {
	su.mutation.ClearSubtitle()
	return su
}

// SetMusicBrainzArtistID sets the music_brainz_artist_id field.
func (su *SongUpdate) SetMusicBrainzArtistID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzArtistID(s)
	return su
}

// SetNillableMusicBrainzArtistID sets the music_brainz_artist_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzArtistID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzArtistID(*s)
	}
	return su
}

// ClearMusicBrainzArtistID clears the value of music_brainz_artist_id.
func (su *SongUpdate) ClearMusicBrainzArtistID() *SongUpdate {
	su.mutation.ClearMusicBrainzArtistID()
	return su
}

// SetMusicBrainzDiscID sets the music_brainz_disc_id field.
func (su *SongUpdate) SetMusicBrainzDiscID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzDiscID(s)
	return su
}

// SetNillableMusicBrainzDiscID sets the music_brainz_disc_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzDiscID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzDiscID(*s)
	}
	return su
}

// ClearMusicBrainzDiscID clears the value of music_brainz_disc_id.
func (su *SongUpdate) ClearMusicBrainzDiscID() *SongUpdate {
	su.mutation.ClearMusicBrainzDiscID()
	return su
}

// SetMusicBrainzReleaseArtistID sets the music_brainz_release_artist_id field.
func (su *SongUpdate) SetMusicBrainzReleaseArtistID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseArtistID(s)
	return su
}

// SetNillableMusicBrainzReleaseArtistID sets the music_brainz_release_artist_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseArtistID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseArtistID(*s)
	}
	return su
}

// ClearMusicBrainzReleaseArtistID clears the value of music_brainz_release_artist_id.
func (su *SongUpdate) ClearMusicBrainzReleaseArtistID() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseArtistID()
	return su
}

// SetMusicBrainzReleaseCountry sets the music_brainz_release_country field.
func (su *SongUpdate) SetMusicBrainzReleaseCountry(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseCountry(s)
	return su
}

// SetNillableMusicBrainzReleaseCountry sets the music_brainz_release_country field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseCountry(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseCountry(*s)
	}
	return su
}

// ClearMusicBrainzReleaseCountry clears the value of music_brainz_release_country.
func (su *SongUpdate) ClearMusicBrainzReleaseCountry() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseCountry()
	return su
}

// SetMusicBrainzReleaseGroupID sets the music_brainz_release_group_id field.
func (su *SongUpdate) SetMusicBrainzReleaseGroupID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseGroupID(s)
	return su
}

// SetNillableMusicBrainzReleaseGroupID sets the music_brainz_release_group_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseGroupID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseGroupID(*s)
	}
	return su
}

// ClearMusicBrainzReleaseGroupID clears the value of music_brainz_release_group_id.
func (su *SongUpdate) ClearMusicBrainzReleaseGroupID() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseGroupID()
	return su
}

// SetMusicBrainzReleaseID sets the music_brainz_release_id field.
func (su *SongUpdate) SetMusicBrainzReleaseID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseID(s)
	return su
}

// SetNillableMusicBrainzReleaseID sets the music_brainz_release_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseID(*s)
	}
	return su
}

// ClearMusicBrainzReleaseID clears the value of music_brainz_release_id.
func (su *SongUpdate) ClearMusicBrainzReleaseID() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseID()
	return su
}

// SetMusicBrainzReleaseStatus sets the music_brainz_release_status field.
func (su *SongUpdate) SetMusicBrainzReleaseStatus(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseStatus(s)
	return su
}

// SetNillableMusicBrainzReleaseStatus sets the music_brainz_release_status field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseStatus(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseStatus(*s)
	}
	return su
}

// ClearMusicBrainzReleaseStatus clears the value of music_brainz_release_status.
func (su *SongUpdate) ClearMusicBrainzReleaseStatus() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseStatus()
	return su
}

// SetMusicBrainzReleaseType sets the music_brainz_release_type field.
func (su *SongUpdate) SetMusicBrainzReleaseType(s string) *SongUpdate {
	su.mutation.SetMusicBrainzReleaseType(s)
	return su
}

// SetNillableMusicBrainzReleaseType sets the music_brainz_release_type field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzReleaseType(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzReleaseType(*s)
	}
	return su
}

// ClearMusicBrainzReleaseType clears the value of music_brainz_release_type.
func (su *SongUpdate) ClearMusicBrainzReleaseType() *SongUpdate {
	su.mutation.ClearMusicBrainzReleaseType()
	return su
}

// SetMusicBrainzTrackID sets the music_brainz_track_id field.
func (su *SongUpdate) SetMusicBrainzTrackID(s string) *SongUpdate {
	su.mutation.SetMusicBrainzTrackID(s)
	return su
}

// SetNillableMusicBrainzTrackID sets the music_brainz_track_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicBrainzTrackID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicBrainzTrackID(*s)
	}
	return su
}

// ClearMusicBrainzTrackID clears the value of music_brainz_track_id.
func (su *SongUpdate) ClearMusicBrainzTrackID() *SongUpdate {
	su.mutation.ClearMusicBrainzTrackID()
	return su
}

// SetMusicIPID sets the music_ip_id field.
func (su *SongUpdate) SetMusicIPID(s string) *SongUpdate {
	su.mutation.SetMusicIPID(s)
	return su
}

// SetNillableMusicIPID sets the music_ip_id field if the given value is not nil.
func (su *SongUpdate) SetNillableMusicIPID(s *string) *SongUpdate {
	if s != nil {
		su.SetMusicIPID(*s)
	}
	return su
}

// ClearMusicIPID clears the value of music_ip_id.
func (su *SongUpdate) ClearMusicIPID() *SongUpdate {
	su.mutation.ClearMusicIPID()
	return su
}

// SetRemixedBy sets the remixed_by field.
func (su *SongUpdate) SetRemixedBy(s string) *SongUpdate {
	su.mutation.SetRemixedBy(s)
	return su
}

// SetNillableRemixedBy sets the remixed_by field if the given value is not nil.
func (su *SongUpdate) SetNillableRemixedBy(s *string) *SongUpdate {
	if s != nil {
		su.SetRemixedBy(*s)
	}
	return su
}

// ClearRemixedBy clears the value of remixed_by.
func (su *SongUpdate) ClearRemixedBy() *SongUpdate {
	su.mutation.ClearRemixedBy()
	return su
}

// SetReplayGainAlbumGain sets the replay_gain_album_gain field.
func (su *SongUpdate) SetReplayGainAlbumGain(f float64) *SongUpdate {
	su.mutation.ResetReplayGainAlbumGain()
	su.mutation.SetReplayGainAlbumGain(f)
	return su
}

// SetNillableReplayGainAlbumGain sets the replay_gain_album_gain field if the given value is not nil.
func (su *SongUpdate) SetNillableReplayGainAlbumGain(f *float64) *SongUpdate {
	if f != nil {
		su.SetReplayGainAlbumGain(*f)
	}
	return su
}

// AddReplayGainAlbumGain adds f to replay_gain_album_gain.
func (su *SongUpdate) AddReplayGainAlbumGain(f float64) *SongUpdate {
	su.mutation.AddReplayGainAlbumGain(f)
	return su
}

// ClearReplayGainAlbumGain clears the value of replay_gain_album_gain.
func (su *SongUpdate) ClearReplayGainAlbumGain() *SongUpdate {
	su.mutation.ClearReplayGainAlbumGain()
	return su
}

// SetReplayGainAlbumPeak sets the replay_gain_album_peak field.
func (su *SongUpdate) SetReplayGainAlbumPeak(f float64) *SongUpdate {
	su.mutation.ResetReplayGainAlbumPeak()
	su.mutation.SetReplayGainAlbumPeak(f)
	return su
}

// SetNillableReplayGainAlbumPeak sets the replay_gain_album_peak field if the given value is not nil.
func (su *SongUpdate) SetNillableReplayGainAlbumPeak(f *float64) *SongUpdate {
	if f != nil {
		su.SetReplayGainAlbumPeak(*f)
	}
	return su
}

// AddReplayGainAlbumPeak adds f to replay_gain_album_peak.
func (su *SongUpdate) AddReplayGainAlbumPeak(f float64) *SongUpdate {
	su.mutation.AddReplayGainAlbumPeak(f)
	return su
}

// ClearReplayGainAlbumPeak clears the value of replay_gain_album_peak.
func (su *SongUpdate) ClearReplayGainAlbumPeak() *SongUpdate {
	su.mutation.ClearReplayGainAlbumPeak()
	return su
}

// SetReplayGainTrackGain sets the replay_gain_track_gain field.
func (su *SongUpdate) SetReplayGainTrackGain(f float64) *SongUpdate {
	su.mutation.ResetReplayGainTrackGain()
	su.mutation.SetReplayGainTrackGain(f)
	return su
}

// SetNillableReplayGainTrackGain sets the replay_gain_track_gain field if the given value is not nil.
func (su *SongUpdate) SetNillableReplayGainTrackGain(f *float64) *SongUpdate {
	if f != nil {
		su.SetReplayGainTrackGain(*f)
	}
	return su
}

// AddReplayGainTrackGain adds f to replay_gain_track_gain.
func (su *SongUpdate) AddReplayGainTrackGain(f float64) *SongUpdate {
	su.mutation.AddReplayGainTrackGain(f)
	return su
}

// ClearReplayGainTrackGain clears the value of replay_gain_track_gain.
func (su *SongUpdate) ClearReplayGainTrackGain() *SongUpdate {
	su.mutation.ClearReplayGainTrackGain()
	return su
}

// SetReplayGainTrackPeak sets the replay_gain_track_peak field.
func (su *SongUpdate) SetReplayGainTrackPeak(f float64) *SongUpdate {
	su.mutation.ResetReplayGainTrackPeak()
	su.mutation.SetReplayGainTrackPeak(f)
	return su
}

// SetNillableReplayGainTrackPeak sets the replay_gain_track_peak field if the given value is not nil.
func (su *SongUpdate) SetNillableReplayGainTrackPeak(f *float64) *SongUpdate {
	if f != nil {
		su.SetReplayGainTrackPeak(*f)
	}
	return su
}

// AddReplayGainTrackPeak adds f to replay_gain_track_peak.
func (su *SongUpdate) AddReplayGainTrackPeak(f float64) *SongUpdate {
	su.mutation.AddReplayGainTrackPeak(f)
	return su
}

// ClearReplayGainTrackPeak clears the value of replay_gain_track_peak.
func (su *SongUpdate) ClearReplayGainTrackPeak() *SongUpdate {
	su.mutation.ClearReplayGainTrackPeak()
	return su
}

// SetMimeType sets the mime_type field.
func (su *SongUpdate) SetMimeType(s string) *SongUpdate {
	su.mutation.SetMimeType(s)
	return su
}

// SetNillableMimeType sets the mime_type field if the given value is not nil.
func (su *SongUpdate) SetNillableMimeType(s *string) *SongUpdate {
	if s != nil {
		su.SetMimeType(*s)
	}
	return su
}

// ClearMimeType clears the value of mime_type.
func (su *SongUpdate) ClearMimeType() *SongUpdate {
	su.mutation.ClearMimeType()
	return su
}

// AddTagIDs adds the tags edge to Tag by ids.
func (su *SongUpdate) AddTagIDs(ids ...int64) *SongUpdate {
	su.mutation.AddTagIDs(ids...)
	return su
}

// AddTags adds the tags edges to Tag.
func (su *SongUpdate) AddTags(t ...*Tag) *SongUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTagIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (su *SongUpdate) Mutation() *SongMutation {
	return su.mutation
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (su *SongUpdate) RemoveTagIDs(ids ...int64) *SongUpdate {
	su.mutation.RemoveTagIDs(ids...)
	return su
}

// RemoveTags removes tags edges to Tag.
func (su *SongUpdate) RemoveTags(t ...*Tag) *SongUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SongUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SongUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SongUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SongUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SongUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: song.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldPath,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitle,
		})
	}
	if su.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldTitle,
		})
	}
	if value, ok := su.mutation.TitleSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitleSort,
		})
	}
	if su.mutation.TitleSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldTitleSort,
		})
	}
	if value, ok := su.mutation.Artists(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: song.FieldArtists,
		})
	}
	if su.mutation.ArtistsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: song.FieldArtists,
		})
	}
	if value, ok := su.mutation.FirstArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstArtist,
		})
	}
	if su.mutation.FirstArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstArtist,
		})
	}
	if value, ok := su.mutation.FirstArtistSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstArtistSort,
		})
	}
	if su.mutation.FirstArtistSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstArtistSort,
		})
	}
	if value, ok := su.mutation.FirstAlbumArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstAlbumArtist,
		})
	}
	if su.mutation.FirstAlbumArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstAlbumArtist,
		})
	}
	if value, ok := su.mutation.FirstAlbumArtistSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstAlbumArtistSort,
		})
	}
	if su.mutation.FirstAlbumArtistSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstAlbumArtistSort,
		})
	}
	if value, ok := su.mutation.AlbumArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldAlbumArtist,
		})
	}
	if su.mutation.AlbumArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldAlbumArtist,
		})
	}
	if value, ok := su.mutation.Album(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldAlbum,
		})
	}
	if su.mutation.AlbumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldAlbum,
		})
	}
	if value, ok := su.mutation.Publisher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldPublisher,
		})
	}
	if su.mutation.PublisherCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldPublisher,
		})
	}
	if value, ok := su.mutation.FirstComposer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstComposer,
		})
	}
	if su.mutation.FirstComposerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstComposer,
		})
	}
	if value, ok := su.mutation.Composers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldComposers,
		})
	}
	if su.mutation.ComposersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldComposers,
		})
	}
	if value, ok := su.mutation.Conductor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldConductor,
		})
	}
	if su.mutation.ConductorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldConductor,
		})
	}
	if value, ok := su.mutation.Genre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldGenre,
		})
	}
	if su.mutation.GenreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldGenre,
		})
	}
	if value, ok := su.mutation.Grouping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldGrouping,
		})
	}
	if su.mutation.GroupingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldGrouping,
		})
	}
	if value, ok := su.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldYear,
		})
	}
	if value, ok := su.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldYear,
		})
	}
	if su.mutation.YearCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldYear,
		})
	}
	if value, ok := su.mutation.TrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldTrackNumber,
		})
	}
	if value, ok := su.mutation.AddedTrackNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldTrackNumber,
		})
	}
	if su.mutation.TrackNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldTrackNumber,
		})
	}
	if value, ok := su.mutation.OfTrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfTrackNumber,
		})
	}
	if value, ok := su.mutation.AddedOfTrackNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfTrackNumber,
		})
	}
	if su.mutation.OfTrackNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldOfTrackNumber,
		})
	}
	if value, ok := su.mutation.DiskNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldDiskNumber,
		})
	}
	if value, ok := su.mutation.AddedDiskNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldDiskNumber,
		})
	}
	if su.mutation.DiskNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldDiskNumber,
		})
	}
	if value, ok := su.mutation.OfDiskNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfDiskNumber,
		})
	}
	if value, ok := su.mutation.AddedOfDiskNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfDiskNumber,
		})
	}
	if su.mutation.OfDiskNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldOfDiskNumber,
		})
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if su.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: song.FieldDuration,
		})
	}
	if value, ok := su.mutation.PlayCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldPlayCount,
		})
	}
	if value, ok := su.mutation.AddedPlayCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldPlayCount,
		})
	}
	if value, ok := su.mutation.SkippedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldSkippedCount,
		})
	}
	if value, ok := su.mutation.AddedSkippedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldSkippedCount,
		})
	}
	if value, ok := su.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldComment,
		})
	}
	if su.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldComment,
		})
	}
	if value, ok := su.mutation.BeatsPerMinute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if value, ok := su.mutation.AddedBeatsPerMinute(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if su.mutation.BeatsPerMinuteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if value, ok := su.mutation.Copyright(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldCopyright,
		})
	}
	if su.mutation.CopyrightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldCopyright,
		})
	}
	if value, ok := su.mutation.DateTagged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldDateTagged,
		})
	}
	if su.mutation.DateTaggedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: song.FieldDateTagged,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldDescription,
		})
	}
	if value, ok := su.mutation.FirstComposerSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstComposerSort,
		})
	}
	if su.mutation.FirstComposerSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstComposerSort,
		})
	}
	if value, ok := su.mutation.ArtistsSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldArtistsSort,
		})
	}
	if su.mutation.ArtistsSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldArtistsSort,
		})
	}
	if value, ok := su.mutation.Lyrics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldLyrics,
		})
	}
	if su.mutation.LyricsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldLyrics,
		})
	}
	if value, ok := su.mutation.InitialKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldInitialKey,
		})
	}
	if su.mutation.InitialKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldInitialKey,
		})
	}
	if value, ok := su.mutation.Isrc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldIsrc,
		})
	}
	if su.mutation.IsrcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldIsrc,
		})
	}
	if value, ok := su.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldSubtitle,
		})
	}
	if su.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldSubtitle,
		})
	}
	if value, ok := su.mutation.MusicBrainzArtistID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzArtistID,
		})
	}
	if su.mutation.MusicBrainzArtistIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzArtistID,
		})
	}
	if value, ok := su.mutation.MusicBrainzDiscID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzDiscID,
		})
	}
	if su.mutation.MusicBrainzDiscIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzDiscID,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseArtistID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseArtistID,
		})
	}
	if su.mutation.MusicBrainzReleaseArtistIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseArtistID,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseCountry,
		})
	}
	if su.mutation.MusicBrainzReleaseCountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseCountry,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseGroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseGroupID,
		})
	}
	if su.mutation.MusicBrainzReleaseGroupIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseGroupID,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseID,
		})
	}
	if su.mutation.MusicBrainzReleaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseID,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseStatus,
		})
	}
	if su.mutation.MusicBrainzReleaseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseStatus,
		})
	}
	if value, ok := su.mutation.MusicBrainzReleaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseType,
		})
	}
	if su.mutation.MusicBrainzReleaseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseType,
		})
	}
	if value, ok := su.mutation.MusicBrainzTrackID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzTrackID,
		})
	}
	if su.mutation.MusicBrainzTrackIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzTrackID,
		})
	}
	if value, ok := su.mutation.MusicIPID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicIPID,
		})
	}
	if su.mutation.MusicIPIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicIPID,
		})
	}
	if value, ok := su.mutation.RemixedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldRemixedBy,
		})
	}
	if su.mutation.RemixedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldRemixedBy,
		})
	}
	if value, ok := su.mutation.ReplayGainAlbumGain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if value, ok := su.mutation.AddedReplayGainAlbumGain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if su.mutation.ReplayGainAlbumGainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if value, ok := su.mutation.ReplayGainAlbumPeak(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if value, ok := su.mutation.AddedReplayGainAlbumPeak(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if su.mutation.ReplayGainAlbumPeakCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if value, ok := su.mutation.ReplayGainTrackGain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if value, ok := su.mutation.AddedReplayGainTrackGain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if su.mutation.ReplayGainTrackGainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if value, ok := su.mutation.ReplayGainTrackPeak(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if value, ok := su.mutation.AddedReplayGainTrackPeak(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if su.mutation.ReplayGainTrackPeakCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if value, ok := su.mutation.MimeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMimeType,
		})
	}
	if su.mutation.MimeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMimeType,
		})
	}
	if nodes := su.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   song.TagsTable,
			Columns: song.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   song.TagsTable,
			Columns: song.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{song.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SongUpdateOne is the builder for updating a single Song entity.
type SongUpdateOne struct {
	config
	hooks    []Hook
	mutation *SongMutation
}

// SetPath sets the path field.
func (suo *SongUpdateOne) SetPath(s string) *SongUpdateOne {
	suo.mutation.SetPath(s)
	return suo
}

// SetTitle sets the title field.
func (suo *SongUpdateOne) SetTitle(s string) *SongUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the title field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableTitle(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// ClearTitle clears the value of title.
func (suo *SongUpdateOne) ClearTitle() *SongUpdateOne {
	suo.mutation.ClearTitle()
	return suo
}

// SetTitleSort sets the title_sort field.
func (suo *SongUpdateOne) SetTitleSort(s string) *SongUpdateOne {
	suo.mutation.SetTitleSort(s)
	return suo
}

// SetNillableTitleSort sets the title_sort field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableTitleSort(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetTitleSort(*s)
	}
	return suo
}

// ClearTitleSort clears the value of title_sort.
func (suo *SongUpdateOne) ClearTitleSort() *SongUpdateOne {
	suo.mutation.ClearTitleSort()
	return suo
}

// SetArtists sets the artists field.
func (suo *SongUpdateOne) SetArtists(s []string) *SongUpdateOne {
	suo.mutation.SetArtists(s)
	return suo
}

// ClearArtists clears the value of artists.
func (suo *SongUpdateOne) ClearArtists() *SongUpdateOne {
	suo.mutation.ClearArtists()
	return suo
}

// SetFirstArtist sets the first_artist field.
func (suo *SongUpdateOne) SetFirstArtist(s string) *SongUpdateOne {
	suo.mutation.SetFirstArtist(s)
	return suo
}

// SetNillableFirstArtist sets the first_artist field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstArtist(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstArtist(*s)
	}
	return suo
}

// ClearFirstArtist clears the value of first_artist.
func (suo *SongUpdateOne) ClearFirstArtist() *SongUpdateOne {
	suo.mutation.ClearFirstArtist()
	return suo
}

// SetFirstArtistSort sets the first_artist_sort field.
func (suo *SongUpdateOne) SetFirstArtistSort(s string) *SongUpdateOne {
	suo.mutation.SetFirstArtistSort(s)
	return suo
}

// SetNillableFirstArtistSort sets the first_artist_sort field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstArtistSort(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstArtistSort(*s)
	}
	return suo
}

// ClearFirstArtistSort clears the value of first_artist_sort.
func (suo *SongUpdateOne) ClearFirstArtistSort() *SongUpdateOne {
	suo.mutation.ClearFirstArtistSort()
	return suo
}

// SetFirstAlbumArtist sets the first_album_artist field.
func (suo *SongUpdateOne) SetFirstAlbumArtist(s string) *SongUpdateOne {
	suo.mutation.SetFirstAlbumArtist(s)
	return suo
}

// SetNillableFirstAlbumArtist sets the first_album_artist field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstAlbumArtist(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstAlbumArtist(*s)
	}
	return suo
}

// ClearFirstAlbumArtist clears the value of first_album_artist.
func (suo *SongUpdateOne) ClearFirstAlbumArtist() *SongUpdateOne {
	suo.mutation.ClearFirstAlbumArtist()
	return suo
}

// SetFirstAlbumArtistSort sets the first_album_artist_sort field.
func (suo *SongUpdateOne) SetFirstAlbumArtistSort(s string) *SongUpdateOne {
	suo.mutation.SetFirstAlbumArtistSort(s)
	return suo
}

// SetNillableFirstAlbumArtistSort sets the first_album_artist_sort field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstAlbumArtistSort(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstAlbumArtistSort(*s)
	}
	return suo
}

// ClearFirstAlbumArtistSort clears the value of first_album_artist_sort.
func (suo *SongUpdateOne) ClearFirstAlbumArtistSort() *SongUpdateOne {
	suo.mutation.ClearFirstAlbumArtistSort()
	return suo
}

// SetAlbumArtist sets the album_artist field.
func (suo *SongUpdateOne) SetAlbumArtist(s string) *SongUpdateOne {
	suo.mutation.SetAlbumArtist(s)
	return suo
}

// SetNillableAlbumArtist sets the album_artist field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableAlbumArtist(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetAlbumArtist(*s)
	}
	return suo
}

// ClearAlbumArtist clears the value of album_artist.
func (suo *SongUpdateOne) ClearAlbumArtist() *SongUpdateOne {
	suo.mutation.ClearAlbumArtist()
	return suo
}

// SetAlbum sets the album field.
func (suo *SongUpdateOne) SetAlbum(s string) *SongUpdateOne {
	suo.mutation.SetAlbum(s)
	return suo
}

// SetNillableAlbum sets the album field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableAlbum(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetAlbum(*s)
	}
	return suo
}

// ClearAlbum clears the value of album.
func (suo *SongUpdateOne) ClearAlbum() *SongUpdateOne {
	suo.mutation.ClearAlbum()
	return suo
}

// SetPublisher sets the publisher field.
func (suo *SongUpdateOne) SetPublisher(s string) *SongUpdateOne {
	suo.mutation.SetPublisher(s)
	return suo
}

// SetNillablePublisher sets the publisher field if the given value is not nil.
func (suo *SongUpdateOne) SetNillablePublisher(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetPublisher(*s)
	}
	return suo
}

// ClearPublisher clears the value of publisher.
func (suo *SongUpdateOne) ClearPublisher() *SongUpdateOne {
	suo.mutation.ClearPublisher()
	return suo
}

// SetFirstComposer sets the first_composer field.
func (suo *SongUpdateOne) SetFirstComposer(s string) *SongUpdateOne {
	suo.mutation.SetFirstComposer(s)
	return suo
}

// SetNillableFirstComposer sets the first_composer field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstComposer(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstComposer(*s)
	}
	return suo
}

// ClearFirstComposer clears the value of first_composer.
func (suo *SongUpdateOne) ClearFirstComposer() *SongUpdateOne {
	suo.mutation.ClearFirstComposer()
	return suo
}

// SetComposers sets the composers field.
func (suo *SongUpdateOne) SetComposers(s string) *SongUpdateOne {
	suo.mutation.SetComposers(s)
	return suo
}

// SetNillableComposers sets the composers field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableComposers(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetComposers(*s)
	}
	return suo
}

// ClearComposers clears the value of composers.
func (suo *SongUpdateOne) ClearComposers() *SongUpdateOne {
	suo.mutation.ClearComposers()
	return suo
}

// SetConductor sets the conductor field.
func (suo *SongUpdateOne) SetConductor(s string) *SongUpdateOne {
	suo.mutation.SetConductor(s)
	return suo
}

// SetNillableConductor sets the conductor field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableConductor(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetConductor(*s)
	}
	return suo
}

// ClearConductor clears the value of conductor.
func (suo *SongUpdateOne) ClearConductor() *SongUpdateOne {
	suo.mutation.ClearConductor()
	return suo
}

// SetGenre sets the genre field.
func (suo *SongUpdateOne) SetGenre(s string) *SongUpdateOne {
	suo.mutation.SetGenre(s)
	return suo
}

// SetNillableGenre sets the genre field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableGenre(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetGenre(*s)
	}
	return suo
}

// ClearGenre clears the value of genre.
func (suo *SongUpdateOne) ClearGenre() *SongUpdateOne {
	suo.mutation.ClearGenre()
	return suo
}

// SetGrouping sets the grouping field.
func (suo *SongUpdateOne) SetGrouping(s string) *SongUpdateOne {
	suo.mutation.SetGrouping(s)
	return suo
}

// SetNillableGrouping sets the grouping field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableGrouping(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetGrouping(*s)
	}
	return suo
}

// ClearGrouping clears the value of grouping.
func (suo *SongUpdateOne) ClearGrouping() *SongUpdateOne {
	suo.mutation.ClearGrouping()
	return suo
}

// SetYear sets the year field.
func (suo *SongUpdateOne) SetYear(u uint) *SongUpdateOne {
	suo.mutation.ResetYear()
	suo.mutation.SetYear(u)
	return suo
}

// SetNillableYear sets the year field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableYear(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetYear(*u)
	}
	return suo
}

// AddYear adds u to year.
func (suo *SongUpdateOne) AddYear(u uint) *SongUpdateOne {
	suo.mutation.AddYear(u)
	return suo
}

// ClearYear clears the value of year.
func (suo *SongUpdateOne) ClearYear() *SongUpdateOne {
	suo.mutation.ClearYear()
	return suo
}

// SetTrackNumber sets the track_number field.
func (suo *SongUpdateOne) SetTrackNumber(u uint) *SongUpdateOne {
	suo.mutation.ResetTrackNumber()
	suo.mutation.SetTrackNumber(u)
	return suo
}

// SetNillableTrackNumber sets the track_number field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableTrackNumber(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetTrackNumber(*u)
	}
	return suo
}

// AddTrackNumber adds u to track_number.
func (suo *SongUpdateOne) AddTrackNumber(u uint) *SongUpdateOne {
	suo.mutation.AddTrackNumber(u)
	return suo
}

// ClearTrackNumber clears the value of track_number.
func (suo *SongUpdateOne) ClearTrackNumber() *SongUpdateOne {
	suo.mutation.ClearTrackNumber()
	return suo
}

// SetOfTrackNumber sets the of_track_number field.
func (suo *SongUpdateOne) SetOfTrackNumber(u uint) *SongUpdateOne {
	suo.mutation.ResetOfTrackNumber()
	suo.mutation.SetOfTrackNumber(u)
	return suo
}

// SetNillableOfTrackNumber sets the of_track_number field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableOfTrackNumber(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetOfTrackNumber(*u)
	}
	return suo
}

// AddOfTrackNumber adds u to of_track_number.
func (suo *SongUpdateOne) AddOfTrackNumber(u uint) *SongUpdateOne {
	suo.mutation.AddOfTrackNumber(u)
	return suo
}

// ClearOfTrackNumber clears the value of of_track_number.
func (suo *SongUpdateOne) ClearOfTrackNumber() *SongUpdateOne {
	suo.mutation.ClearOfTrackNumber()
	return suo
}

// SetDiskNumber sets the disk_number field.
func (suo *SongUpdateOne) SetDiskNumber(u uint) *SongUpdateOne {
	suo.mutation.ResetDiskNumber()
	suo.mutation.SetDiskNumber(u)
	return suo
}

// SetNillableDiskNumber sets the disk_number field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableDiskNumber(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetDiskNumber(*u)
	}
	return suo
}

// AddDiskNumber adds u to disk_number.
func (suo *SongUpdateOne) AddDiskNumber(u uint) *SongUpdateOne {
	suo.mutation.AddDiskNumber(u)
	return suo
}

// ClearDiskNumber clears the value of disk_number.
func (suo *SongUpdateOne) ClearDiskNumber() *SongUpdateOne {
	suo.mutation.ClearDiskNumber()
	return suo
}

// SetOfDiskNumber sets the of_disk_number field.
func (suo *SongUpdateOne) SetOfDiskNumber(u uint) *SongUpdateOne {
	suo.mutation.ResetOfDiskNumber()
	suo.mutation.SetOfDiskNumber(u)
	return suo
}

// SetNillableOfDiskNumber sets the of_disk_number field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableOfDiskNumber(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetOfDiskNumber(*u)
	}
	return suo
}

// AddOfDiskNumber adds u to of_disk_number.
func (suo *SongUpdateOne) AddOfDiskNumber(u uint) *SongUpdateOne {
	suo.mutation.AddOfDiskNumber(u)
	return suo
}

// ClearOfDiskNumber clears the value of of_disk_number.
func (suo *SongUpdateOne) ClearOfDiskNumber() *SongUpdateOne {
	suo.mutation.ClearOfDiskNumber()
	return suo
}

// SetDuration sets the duration field.
func (suo *SongUpdateOne) SetDuration(i int) *SongUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(i)
	return suo
}

// SetNillableDuration sets the duration field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableDuration(i *int) *SongUpdateOne {
	if i != nil {
		suo.SetDuration(*i)
	}
	return suo
}

// AddDuration adds i to duration.
func (suo *SongUpdateOne) AddDuration(i int) *SongUpdateOne {
	suo.mutation.AddDuration(i)
	return suo
}

// ClearDuration clears the value of duration.
func (suo *SongUpdateOne) ClearDuration() *SongUpdateOne {
	suo.mutation.ClearDuration()
	return suo
}

// SetPlayCount sets the play_count field.
func (suo *SongUpdateOne) SetPlayCount(u uint) *SongUpdateOne {
	suo.mutation.ResetPlayCount()
	suo.mutation.SetPlayCount(u)
	return suo
}

// SetNillablePlayCount sets the play_count field if the given value is not nil.
func (suo *SongUpdateOne) SetNillablePlayCount(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetPlayCount(*u)
	}
	return suo
}

// AddPlayCount adds u to play_count.
func (suo *SongUpdateOne) AddPlayCount(u uint) *SongUpdateOne {
	suo.mutation.AddPlayCount(u)
	return suo
}

// SetSkippedCount sets the skipped_count field.
func (suo *SongUpdateOne) SetSkippedCount(u uint) *SongUpdateOne {
	suo.mutation.ResetSkippedCount()
	suo.mutation.SetSkippedCount(u)
	return suo
}

// SetNillableSkippedCount sets the skipped_count field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableSkippedCount(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetSkippedCount(*u)
	}
	return suo
}

// AddSkippedCount adds u to skipped_count.
func (suo *SongUpdateOne) AddSkippedCount(u uint) *SongUpdateOne {
	suo.mutation.AddSkippedCount(u)
	return suo
}

// SetComment sets the comment field.
func (suo *SongUpdateOne) SetComment(s string) *SongUpdateOne {
	suo.mutation.SetComment(s)
	return suo
}

// SetNillableComment sets the comment field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableComment(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetComment(*s)
	}
	return suo
}

// ClearComment clears the value of comment.
func (suo *SongUpdateOne) ClearComment() *SongUpdateOne {
	suo.mutation.ClearComment()
	return suo
}

// SetBeatsPerMinute sets the beats_per_minute field.
func (suo *SongUpdateOne) SetBeatsPerMinute(u uint) *SongUpdateOne {
	suo.mutation.ResetBeatsPerMinute()
	suo.mutation.SetBeatsPerMinute(u)
	return suo
}

// SetNillableBeatsPerMinute sets the beats_per_minute field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableBeatsPerMinute(u *uint) *SongUpdateOne {
	if u != nil {
		suo.SetBeatsPerMinute(*u)
	}
	return suo
}

// AddBeatsPerMinute adds u to beats_per_minute.
func (suo *SongUpdateOne) AddBeatsPerMinute(u uint) *SongUpdateOne {
	suo.mutation.AddBeatsPerMinute(u)
	return suo
}

// ClearBeatsPerMinute clears the value of beats_per_minute.
func (suo *SongUpdateOne) ClearBeatsPerMinute() *SongUpdateOne {
	suo.mutation.ClearBeatsPerMinute()
	return suo
}

// SetCopyright sets the copyright field.
func (suo *SongUpdateOne) SetCopyright(s string) *SongUpdateOne {
	suo.mutation.SetCopyright(s)
	return suo
}

// SetNillableCopyright sets the copyright field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableCopyright(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetCopyright(*s)
	}
	return suo
}

// ClearCopyright clears the value of copyright.
func (suo *SongUpdateOne) ClearCopyright() *SongUpdateOne {
	suo.mutation.ClearCopyright()
	return suo
}

// SetDateTagged sets the date_tagged field.
func (suo *SongUpdateOne) SetDateTagged(t time.Time) *SongUpdateOne {
	suo.mutation.SetDateTagged(t)
	return suo
}

// SetNillableDateTagged sets the date_tagged field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableDateTagged(t *time.Time) *SongUpdateOne {
	if t != nil {
		suo.SetDateTagged(*t)
	}
	return suo
}

// ClearDateTagged clears the value of date_tagged.
func (suo *SongUpdateOne) ClearDateTagged() *SongUpdateOne {
	suo.mutation.ClearDateTagged()
	return suo
}

// SetDescription sets the description field.
func (suo *SongUpdateOne) SetDescription(s string) *SongUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableDescription(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of description.
func (suo *SongUpdateOne) ClearDescription() *SongUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetFirstComposerSort sets the first_composer_sort field.
func (suo *SongUpdateOne) SetFirstComposerSort(s string) *SongUpdateOne {
	suo.mutation.SetFirstComposerSort(s)
	return suo
}

// SetNillableFirstComposerSort sets the first_composer_sort field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableFirstComposerSort(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetFirstComposerSort(*s)
	}
	return suo
}

// ClearFirstComposerSort clears the value of first_composer_sort.
func (suo *SongUpdateOne) ClearFirstComposerSort() *SongUpdateOne {
	suo.mutation.ClearFirstComposerSort()
	return suo
}

// SetArtistsSort sets the artists_sort field.
func (suo *SongUpdateOne) SetArtistsSort(s string) *SongUpdateOne {
	suo.mutation.SetArtistsSort(s)
	return suo
}

// SetNillableArtistsSort sets the artists_sort field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableArtistsSort(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetArtistsSort(*s)
	}
	return suo
}

// ClearArtistsSort clears the value of artists_sort.
func (suo *SongUpdateOne) ClearArtistsSort() *SongUpdateOne {
	suo.mutation.ClearArtistsSort()
	return suo
}

// SetLyrics sets the lyrics field.
func (suo *SongUpdateOne) SetLyrics(s string) *SongUpdateOne {
	suo.mutation.SetLyrics(s)
	return suo
}

// SetNillableLyrics sets the lyrics field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableLyrics(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetLyrics(*s)
	}
	return suo
}

// ClearLyrics clears the value of lyrics.
func (suo *SongUpdateOne) ClearLyrics() *SongUpdateOne {
	suo.mutation.ClearLyrics()
	return suo
}

// SetInitialKey sets the initial_key field.
func (suo *SongUpdateOne) SetInitialKey(s string) *SongUpdateOne {
	suo.mutation.SetInitialKey(s)
	return suo
}

// SetNillableInitialKey sets the initial_key field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableInitialKey(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetInitialKey(*s)
	}
	return suo
}

// ClearInitialKey clears the value of initial_key.
func (suo *SongUpdateOne) ClearInitialKey() *SongUpdateOne {
	suo.mutation.ClearInitialKey()
	return suo
}

// SetIsrc sets the isrc field.
func (suo *SongUpdateOne) SetIsrc(s string) *SongUpdateOne {
	suo.mutation.SetIsrc(s)
	return suo
}

// SetNillableIsrc sets the isrc field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableIsrc(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetIsrc(*s)
	}
	return suo
}

// ClearIsrc clears the value of isrc.
func (suo *SongUpdateOne) ClearIsrc() *SongUpdateOne {
	suo.mutation.ClearIsrc()
	return suo
}

// SetSubtitle sets the subtitle field.
func (suo *SongUpdateOne) SetSubtitle(s string) *SongUpdateOne {
	suo.mutation.SetSubtitle(s)
	return suo
}

// SetNillableSubtitle sets the subtitle field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableSubtitle(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetSubtitle(*s)
	}
	return suo
}

// ClearSubtitle clears the value of subtitle.
func (suo *SongUpdateOne) ClearSubtitle() *SongUpdateOne {
	suo.mutation.ClearSubtitle()
	return suo
}

// SetMusicBrainzArtistID sets the music_brainz_artist_id field.
func (suo *SongUpdateOne) SetMusicBrainzArtistID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzArtistID(s)
	return suo
}

// SetNillableMusicBrainzArtistID sets the music_brainz_artist_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzArtistID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzArtistID(*s)
	}
	return suo
}

// ClearMusicBrainzArtistID clears the value of music_brainz_artist_id.
func (suo *SongUpdateOne) ClearMusicBrainzArtistID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzArtistID()
	return suo
}

// SetMusicBrainzDiscID sets the music_brainz_disc_id field.
func (suo *SongUpdateOne) SetMusicBrainzDiscID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzDiscID(s)
	return suo
}

// SetNillableMusicBrainzDiscID sets the music_brainz_disc_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzDiscID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzDiscID(*s)
	}
	return suo
}

// ClearMusicBrainzDiscID clears the value of music_brainz_disc_id.
func (suo *SongUpdateOne) ClearMusicBrainzDiscID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzDiscID()
	return suo
}

// SetMusicBrainzReleaseArtistID sets the music_brainz_release_artist_id field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseArtistID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseArtistID(s)
	return suo
}

// SetNillableMusicBrainzReleaseArtistID sets the music_brainz_release_artist_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseArtistID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseArtistID(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseArtistID clears the value of music_brainz_release_artist_id.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseArtistID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseArtistID()
	return suo
}

// SetMusicBrainzReleaseCountry sets the music_brainz_release_country field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseCountry(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseCountry(s)
	return suo
}

// SetNillableMusicBrainzReleaseCountry sets the music_brainz_release_country field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseCountry(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseCountry(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseCountry clears the value of music_brainz_release_country.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseCountry() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseCountry()
	return suo
}

// SetMusicBrainzReleaseGroupID sets the music_brainz_release_group_id field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseGroupID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseGroupID(s)
	return suo
}

// SetNillableMusicBrainzReleaseGroupID sets the music_brainz_release_group_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseGroupID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseGroupID(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseGroupID clears the value of music_brainz_release_group_id.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseGroupID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseGroupID()
	return suo
}

// SetMusicBrainzReleaseID sets the music_brainz_release_id field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseID(s)
	return suo
}

// SetNillableMusicBrainzReleaseID sets the music_brainz_release_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseID(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseID clears the value of music_brainz_release_id.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseID()
	return suo
}

// SetMusicBrainzReleaseStatus sets the music_brainz_release_status field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseStatus(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseStatus(s)
	return suo
}

// SetNillableMusicBrainzReleaseStatus sets the music_brainz_release_status field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseStatus(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseStatus(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseStatus clears the value of music_brainz_release_status.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseStatus() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseStatus()
	return suo
}

// SetMusicBrainzReleaseType sets the music_brainz_release_type field.
func (suo *SongUpdateOne) SetMusicBrainzReleaseType(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzReleaseType(s)
	return suo
}

// SetNillableMusicBrainzReleaseType sets the music_brainz_release_type field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzReleaseType(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzReleaseType(*s)
	}
	return suo
}

// ClearMusicBrainzReleaseType clears the value of music_brainz_release_type.
func (suo *SongUpdateOne) ClearMusicBrainzReleaseType() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzReleaseType()
	return suo
}

// SetMusicBrainzTrackID sets the music_brainz_track_id field.
func (suo *SongUpdateOne) SetMusicBrainzTrackID(s string) *SongUpdateOne {
	suo.mutation.SetMusicBrainzTrackID(s)
	return suo
}

// SetNillableMusicBrainzTrackID sets the music_brainz_track_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicBrainzTrackID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicBrainzTrackID(*s)
	}
	return suo
}

// ClearMusicBrainzTrackID clears the value of music_brainz_track_id.
func (suo *SongUpdateOne) ClearMusicBrainzTrackID() *SongUpdateOne {
	suo.mutation.ClearMusicBrainzTrackID()
	return suo
}

// SetMusicIPID sets the music_ip_id field.
func (suo *SongUpdateOne) SetMusicIPID(s string) *SongUpdateOne {
	suo.mutation.SetMusicIPID(s)
	return suo
}

// SetNillableMusicIPID sets the music_ip_id field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMusicIPID(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMusicIPID(*s)
	}
	return suo
}

// ClearMusicIPID clears the value of music_ip_id.
func (suo *SongUpdateOne) ClearMusicIPID() *SongUpdateOne {
	suo.mutation.ClearMusicIPID()
	return suo
}

// SetRemixedBy sets the remixed_by field.
func (suo *SongUpdateOne) SetRemixedBy(s string) *SongUpdateOne {
	suo.mutation.SetRemixedBy(s)
	return suo
}

// SetNillableRemixedBy sets the remixed_by field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableRemixedBy(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetRemixedBy(*s)
	}
	return suo
}

// ClearRemixedBy clears the value of remixed_by.
func (suo *SongUpdateOne) ClearRemixedBy() *SongUpdateOne {
	suo.mutation.ClearRemixedBy()
	return suo
}

// SetReplayGainAlbumGain sets the replay_gain_album_gain field.
func (suo *SongUpdateOne) SetReplayGainAlbumGain(f float64) *SongUpdateOne {
	suo.mutation.ResetReplayGainAlbumGain()
	suo.mutation.SetReplayGainAlbumGain(f)
	return suo
}

// SetNillableReplayGainAlbumGain sets the replay_gain_album_gain field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableReplayGainAlbumGain(f *float64) *SongUpdateOne {
	if f != nil {
		suo.SetReplayGainAlbumGain(*f)
	}
	return suo
}

// AddReplayGainAlbumGain adds f to replay_gain_album_gain.
func (suo *SongUpdateOne) AddReplayGainAlbumGain(f float64) *SongUpdateOne {
	suo.mutation.AddReplayGainAlbumGain(f)
	return suo
}

// ClearReplayGainAlbumGain clears the value of replay_gain_album_gain.
func (suo *SongUpdateOne) ClearReplayGainAlbumGain() *SongUpdateOne {
	suo.mutation.ClearReplayGainAlbumGain()
	return suo
}

// SetReplayGainAlbumPeak sets the replay_gain_album_peak field.
func (suo *SongUpdateOne) SetReplayGainAlbumPeak(f float64) *SongUpdateOne {
	suo.mutation.ResetReplayGainAlbumPeak()
	suo.mutation.SetReplayGainAlbumPeak(f)
	return suo
}

// SetNillableReplayGainAlbumPeak sets the replay_gain_album_peak field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableReplayGainAlbumPeak(f *float64) *SongUpdateOne {
	if f != nil {
		suo.SetReplayGainAlbumPeak(*f)
	}
	return suo
}

// AddReplayGainAlbumPeak adds f to replay_gain_album_peak.
func (suo *SongUpdateOne) AddReplayGainAlbumPeak(f float64) *SongUpdateOne {
	suo.mutation.AddReplayGainAlbumPeak(f)
	return suo
}

// ClearReplayGainAlbumPeak clears the value of replay_gain_album_peak.
func (suo *SongUpdateOne) ClearReplayGainAlbumPeak() *SongUpdateOne {
	suo.mutation.ClearReplayGainAlbumPeak()
	return suo
}

// SetReplayGainTrackGain sets the replay_gain_track_gain field.
func (suo *SongUpdateOne) SetReplayGainTrackGain(f float64) *SongUpdateOne {
	suo.mutation.ResetReplayGainTrackGain()
	suo.mutation.SetReplayGainTrackGain(f)
	return suo
}

// SetNillableReplayGainTrackGain sets the replay_gain_track_gain field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableReplayGainTrackGain(f *float64) *SongUpdateOne {
	if f != nil {
		suo.SetReplayGainTrackGain(*f)
	}
	return suo
}

// AddReplayGainTrackGain adds f to replay_gain_track_gain.
func (suo *SongUpdateOne) AddReplayGainTrackGain(f float64) *SongUpdateOne {
	suo.mutation.AddReplayGainTrackGain(f)
	return suo
}

// ClearReplayGainTrackGain clears the value of replay_gain_track_gain.
func (suo *SongUpdateOne) ClearReplayGainTrackGain() *SongUpdateOne {
	suo.mutation.ClearReplayGainTrackGain()
	return suo
}

// SetReplayGainTrackPeak sets the replay_gain_track_peak field.
func (suo *SongUpdateOne) SetReplayGainTrackPeak(f float64) *SongUpdateOne {
	suo.mutation.ResetReplayGainTrackPeak()
	suo.mutation.SetReplayGainTrackPeak(f)
	return suo
}

// SetNillableReplayGainTrackPeak sets the replay_gain_track_peak field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableReplayGainTrackPeak(f *float64) *SongUpdateOne {
	if f != nil {
		suo.SetReplayGainTrackPeak(*f)
	}
	return suo
}

// AddReplayGainTrackPeak adds f to replay_gain_track_peak.
func (suo *SongUpdateOne) AddReplayGainTrackPeak(f float64) *SongUpdateOne {
	suo.mutation.AddReplayGainTrackPeak(f)
	return suo
}

// ClearReplayGainTrackPeak clears the value of replay_gain_track_peak.
func (suo *SongUpdateOne) ClearReplayGainTrackPeak() *SongUpdateOne {
	suo.mutation.ClearReplayGainTrackPeak()
	return suo
}

// SetMimeType sets the mime_type field.
func (suo *SongUpdateOne) SetMimeType(s string) *SongUpdateOne {
	suo.mutation.SetMimeType(s)
	return suo
}

// SetNillableMimeType sets the mime_type field if the given value is not nil.
func (suo *SongUpdateOne) SetNillableMimeType(s *string) *SongUpdateOne {
	if s != nil {
		suo.SetMimeType(*s)
	}
	return suo
}

// ClearMimeType clears the value of mime_type.
func (suo *SongUpdateOne) ClearMimeType() *SongUpdateOne {
	suo.mutation.ClearMimeType()
	return suo
}

// AddTagIDs adds the tags edge to Tag by ids.
func (suo *SongUpdateOne) AddTagIDs(ids ...int64) *SongUpdateOne {
	suo.mutation.AddTagIDs(ids...)
	return suo
}

// AddTags adds the tags edges to Tag.
func (suo *SongUpdateOne) AddTags(t ...*Tag) *SongUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTagIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (suo *SongUpdateOne) Mutation() *SongMutation {
	return suo.mutation
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (suo *SongUpdateOne) RemoveTagIDs(ids ...int64) *SongUpdateOne {
	suo.mutation.RemoveTagIDs(ids...)
	return suo
}

// RemoveTags removes tags edges to Tag.
func (suo *SongUpdateOne) RemoveTags(t ...*Tag) *SongUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SongUpdateOne) Save(ctx context.Context) (*Song, error) {

	var (
		err  error
		node *Song
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SongUpdateOne) SaveX(ctx context.Context) *Song {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SongUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SongUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SongUpdateOne) sqlSave(ctx context.Context) (s *Song, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   song.Table,
			Columns: song.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: song.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Song.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldPath,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitle,
		})
	}
	if suo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldTitle,
		})
	}
	if value, ok := suo.mutation.TitleSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldTitleSort,
		})
	}
	if suo.mutation.TitleSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldTitleSort,
		})
	}
	if value, ok := suo.mutation.Artists(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: song.FieldArtists,
		})
	}
	if suo.mutation.ArtistsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: song.FieldArtists,
		})
	}
	if value, ok := suo.mutation.FirstArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstArtist,
		})
	}
	if suo.mutation.FirstArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstArtist,
		})
	}
	if value, ok := suo.mutation.FirstArtistSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstArtistSort,
		})
	}
	if suo.mutation.FirstArtistSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstArtistSort,
		})
	}
	if value, ok := suo.mutation.FirstAlbumArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstAlbumArtist,
		})
	}
	if suo.mutation.FirstAlbumArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstAlbumArtist,
		})
	}
	if value, ok := suo.mutation.FirstAlbumArtistSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstAlbumArtistSort,
		})
	}
	if suo.mutation.FirstAlbumArtistSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstAlbumArtistSort,
		})
	}
	if value, ok := suo.mutation.AlbumArtist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldAlbumArtist,
		})
	}
	if suo.mutation.AlbumArtistCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldAlbumArtist,
		})
	}
	if value, ok := suo.mutation.Album(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldAlbum,
		})
	}
	if suo.mutation.AlbumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldAlbum,
		})
	}
	if value, ok := suo.mutation.Publisher(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldPublisher,
		})
	}
	if suo.mutation.PublisherCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldPublisher,
		})
	}
	if value, ok := suo.mutation.FirstComposer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstComposer,
		})
	}
	if suo.mutation.FirstComposerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstComposer,
		})
	}
	if value, ok := suo.mutation.Composers(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldComposers,
		})
	}
	if suo.mutation.ComposersCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldComposers,
		})
	}
	if value, ok := suo.mutation.Conductor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldConductor,
		})
	}
	if suo.mutation.ConductorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldConductor,
		})
	}
	if value, ok := suo.mutation.Genre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldGenre,
		})
	}
	if suo.mutation.GenreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldGenre,
		})
	}
	if value, ok := suo.mutation.Grouping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldGrouping,
		})
	}
	if suo.mutation.GroupingCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldGrouping,
		})
	}
	if value, ok := suo.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldYear,
		})
	}
	if value, ok := suo.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldYear,
		})
	}
	if suo.mutation.YearCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldYear,
		})
	}
	if value, ok := suo.mutation.TrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldTrackNumber,
		})
	}
	if value, ok := suo.mutation.AddedTrackNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldTrackNumber,
		})
	}
	if suo.mutation.TrackNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldTrackNumber,
		})
	}
	if value, ok := suo.mutation.OfTrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfTrackNumber,
		})
	}
	if value, ok := suo.mutation.AddedOfTrackNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfTrackNumber,
		})
	}
	if suo.mutation.OfTrackNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldOfTrackNumber,
		})
	}
	if value, ok := suo.mutation.DiskNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldDiskNumber,
		})
	}
	if value, ok := suo.mutation.AddedDiskNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldDiskNumber,
		})
	}
	if suo.mutation.DiskNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldDiskNumber,
		})
	}
	if value, ok := suo.mutation.OfDiskNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfDiskNumber,
		})
	}
	if value, ok := suo.mutation.AddedOfDiskNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldOfDiskNumber,
		})
	}
	if suo.mutation.OfDiskNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldOfDiskNumber,
		})
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: song.FieldDuration,
		})
	}
	if suo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: song.FieldDuration,
		})
	}
	if value, ok := suo.mutation.PlayCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldPlayCount,
		})
	}
	if value, ok := suo.mutation.AddedPlayCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldPlayCount,
		})
	}
	if value, ok := suo.mutation.SkippedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldSkippedCount,
		})
	}
	if value, ok := suo.mutation.AddedSkippedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldSkippedCount,
		})
	}
	if value, ok := suo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldComment,
		})
	}
	if suo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldComment,
		})
	}
	if value, ok := suo.mutation.BeatsPerMinute(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if value, ok := suo.mutation.AddedBeatsPerMinute(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if suo.mutation.BeatsPerMinuteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: song.FieldBeatsPerMinute,
		})
	}
	if value, ok := suo.mutation.Copyright(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldCopyright,
		})
	}
	if suo.mutation.CopyrightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldCopyright,
		})
	}
	if value, ok := suo.mutation.DateTagged(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: song.FieldDateTagged,
		})
	}
	if suo.mutation.DateTaggedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: song.FieldDateTagged,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldDescription,
		})
	}
	if value, ok := suo.mutation.FirstComposerSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldFirstComposerSort,
		})
	}
	if suo.mutation.FirstComposerSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldFirstComposerSort,
		})
	}
	if value, ok := suo.mutation.ArtistsSort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldArtistsSort,
		})
	}
	if suo.mutation.ArtistsSortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldArtistsSort,
		})
	}
	if value, ok := suo.mutation.Lyrics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldLyrics,
		})
	}
	if suo.mutation.LyricsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldLyrics,
		})
	}
	if value, ok := suo.mutation.InitialKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldInitialKey,
		})
	}
	if suo.mutation.InitialKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldInitialKey,
		})
	}
	if value, ok := suo.mutation.Isrc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldIsrc,
		})
	}
	if suo.mutation.IsrcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldIsrc,
		})
	}
	if value, ok := suo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldSubtitle,
		})
	}
	if suo.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldSubtitle,
		})
	}
	if value, ok := suo.mutation.MusicBrainzArtistID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzArtistID,
		})
	}
	if suo.mutation.MusicBrainzArtistIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzArtistID,
		})
	}
	if value, ok := suo.mutation.MusicBrainzDiscID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzDiscID,
		})
	}
	if suo.mutation.MusicBrainzDiscIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzDiscID,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseArtistID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseArtistID,
		})
	}
	if suo.mutation.MusicBrainzReleaseArtistIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseArtistID,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseCountry,
		})
	}
	if suo.mutation.MusicBrainzReleaseCountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseCountry,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseGroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseGroupID,
		})
	}
	if suo.mutation.MusicBrainzReleaseGroupIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseGroupID,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseID,
		})
	}
	if suo.mutation.MusicBrainzReleaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseID,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseStatus,
		})
	}
	if suo.mutation.MusicBrainzReleaseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseStatus,
		})
	}
	if value, ok := suo.mutation.MusicBrainzReleaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzReleaseType,
		})
	}
	if suo.mutation.MusicBrainzReleaseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzReleaseType,
		})
	}
	if value, ok := suo.mutation.MusicBrainzTrackID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicBrainzTrackID,
		})
	}
	if suo.mutation.MusicBrainzTrackIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicBrainzTrackID,
		})
	}
	if value, ok := suo.mutation.MusicIPID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMusicIPID,
		})
	}
	if suo.mutation.MusicIPIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMusicIPID,
		})
	}
	if value, ok := suo.mutation.RemixedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldRemixedBy,
		})
	}
	if suo.mutation.RemixedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldRemixedBy,
		})
	}
	if value, ok := suo.mutation.ReplayGainAlbumGain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if value, ok := suo.mutation.AddedReplayGainAlbumGain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if suo.mutation.ReplayGainAlbumGainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainAlbumGain,
		})
	}
	if value, ok := suo.mutation.ReplayGainAlbumPeak(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if value, ok := suo.mutation.AddedReplayGainAlbumPeak(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if suo.mutation.ReplayGainAlbumPeakCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainAlbumPeak,
		})
	}
	if value, ok := suo.mutation.ReplayGainTrackGain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if value, ok := suo.mutation.AddedReplayGainTrackGain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if suo.mutation.ReplayGainTrackGainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainTrackGain,
		})
	}
	if value, ok := suo.mutation.ReplayGainTrackPeak(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if value, ok := suo.mutation.AddedReplayGainTrackPeak(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if suo.mutation.ReplayGainTrackPeakCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: song.FieldReplayGainTrackPeak,
		})
	}
	if value, ok := suo.mutation.MimeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: song.FieldMimeType,
		})
	}
	if suo.mutation.MimeTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: song.FieldMimeType,
		})
	}
	if nodes := suo.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   song.TagsTable,
			Columns: song.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   song.TagsTable,
			Columns: song.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Song{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{song.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
