// Code generated by entc, DO NOT EDIT.

package song

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/jeffsvajlenko/fortissimo/server/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleSort applies equality check predicate on the "title_sort" field. It's identical to TitleSortEQ.
func TitleSort(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleSort), v))
	})
}

// FirstArtist applies equality check predicate on the "first_artist" field. It's identical to FirstArtistEQ.
func FirstArtist(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistSort applies equality check predicate on the "first_artist_sort" field. It's identical to FirstArtistSortEQ.
func FirstArtistSort(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstArtistSort), v))
	})
}

// FirstAlbumArtist applies equality check predicate on the "first_album_artist" field. It's identical to FirstAlbumArtistEQ.
func FirstAlbumArtist(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistSort applies equality check predicate on the "first_album_artist_sort" field. It's identical to FirstAlbumArtistSortEQ.
func FirstAlbumArtistSort(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// AlbumArtist applies equality check predicate on the "album_artist" field. It's identical to AlbumArtistEQ.
func AlbumArtist(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbumArtist), v))
	})
}

// Album applies equality check predicate on the "album" field. It's identical to AlbumEQ.
func Album(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbum), v))
	})
}

// Publisher applies equality check predicate on the "publisher" field. It's identical to PublisherEQ.
func Publisher(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublisher), v))
	})
}

// FirstComposer applies equality check predicate on the "first_composer" field. It's identical to FirstComposerEQ.
func FirstComposer(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstComposer), v))
	})
}

// Composers applies equality check predicate on the "composers" field. It's identical to ComposersEQ.
func Composers(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComposers), v))
	})
}

// Conductor applies equality check predicate on the "conductor" field. It's identical to ConductorEQ.
func Conductor(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConductor), v))
	})
}

// Genre applies equality check predicate on the "genre" field. It's identical to GenreEQ.
func Genre(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenre), v))
	})
}

// Grouping applies equality check predicate on the "grouping" field. It's identical to GroupingEQ.
func Grouping(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrouping), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// TrackNumber applies equality check predicate on the "track_number" field. It's identical to TrackNumberEQ.
func TrackNumber(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackNumber), v))
	})
}

// OfTrackNumber applies equality check predicate on the "of_track_number" field. It's identical to OfTrackNumberEQ.
func OfTrackNumber(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfTrackNumber), v))
	})
}

// DiskNumber applies equality check predicate on the "disk_number" field. It's identical to DiskNumberEQ.
func DiskNumber(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiskNumber), v))
	})
}

// OfDiskNumber applies equality check predicate on the "of_disk_number" field. It's identical to OfDiskNumberEQ.
func OfDiskNumber(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfDiskNumber), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// PlayCount applies equality check predicate on the "play_count" field. It's identical to PlayCountEQ.
func PlayCount(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayCount), v))
	})
}

// SkippedCount applies equality check predicate on the "skipped_count" field. It's identical to SkippedCountEQ.
func SkippedCount(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkippedCount), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// BeatsPerMinute applies equality check predicate on the "beats_per_minute" field. It's identical to BeatsPerMinuteEQ.
func BeatsPerMinute(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeatsPerMinute), v))
	})
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyright), v))
	})
}

// DateTagged applies equality check predicate on the "date_tagged" field. It's identical to DateTaggedEQ.
func DateTagged(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTagged), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// FirstComposerSort applies equality check predicate on the "first_composer_sort" field. It's identical to FirstComposerSortEQ.
func FirstComposerSort(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstComposerSort), v))
	})
}

// ArtistsSort applies equality check predicate on the "artists_sort" field. It's identical to ArtistsSortEQ.
func ArtistsSort(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArtistsSort), v))
	})
}

// Lyrics applies equality check predicate on the "lyrics" field. It's identical to LyricsEQ.
func Lyrics(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLyrics), v))
	})
}

// InitialKey applies equality check predicate on the "initial_key" field. It's identical to InitialKeyEQ.
func InitialKey(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialKey), v))
	})
}

// Isrc applies equality check predicate on the "isrc" field. It's identical to IsrcEQ.
func Isrc(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsrc), v))
	})
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// MusicBrainzArtistID applies equality check predicate on the "music_brainz_artist_id" field. It's identical to MusicBrainzArtistIDEQ.
func MusicBrainzArtistID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzDiscID applies equality check predicate on the "music_brainz_disc_id" field. It's identical to MusicBrainzDiscIDEQ.
func MusicBrainzDiscID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzReleaseArtistID applies equality check predicate on the "music_brainz_release_artist_id" field. It's identical to MusicBrainzReleaseArtistIDEQ.
func MusicBrainzReleaseArtistID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseCountry applies equality check predicate on the "music_brainz_release_country" field. It's identical to MusicBrainzReleaseCountryEQ.
func MusicBrainzReleaseCountry(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseGroupID applies equality check predicate on the "music_brainz_release_group_id" field. It's identical to MusicBrainzReleaseGroupIDEQ.
func MusicBrainzReleaseGroupID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseID applies equality check predicate on the "music_brainz_release_id" field. It's identical to MusicBrainzReleaseIDEQ.
func MusicBrainzReleaseID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseStatus applies equality check predicate on the "music_brainz_release_status" field. It's identical to MusicBrainzReleaseStatusEQ.
func MusicBrainzReleaseStatus(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseType applies equality check predicate on the "music_brainz_release_type" field. It's identical to MusicBrainzReleaseTypeEQ.
func MusicBrainzReleaseType(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzTrackID applies equality check predicate on the "music_brainz_track_id" field. It's identical to MusicBrainzTrackIDEQ.
func MusicBrainzTrackID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicIPID applies equality check predicate on the "music_ip_id" field. It's identical to MusicIPIDEQ.
func MusicIPID(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicIPID), v))
	})
}

// RemixedBy applies equality check predicate on the "remixed_by" field. It's identical to RemixedByEQ.
func RemixedBy(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemixedBy), v))
	})
}

// ReplayGainAlbumGain applies equality check predicate on the "replay_gain_album_gain" field. It's identical to ReplayGainAlbumGainEQ.
func ReplayGainAlbumGain(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumPeak applies equality check predicate on the "replay_gain_album_peak" field. It's identical to ReplayGainAlbumPeakEQ.
func ReplayGainAlbumPeak(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainTrackGain applies equality check predicate on the "replay_gain_track_gain" field. It's identical to ReplayGainTrackGainEQ.
func ReplayGainTrackGain(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackPeak applies equality check predicate on the "replay_gain_track_peak" field. It's identical to ReplayGainTrackPeakEQ.
func ReplayGainTrackPeak(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainTrackPeak), v))
	})
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMimeType), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// TitleSortEQ applies the EQ predicate on the "title_sort" field.
func TitleSortEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleSort), v))
	})
}

// TitleSortNEQ applies the NEQ predicate on the "title_sort" field.
func TitleSortNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitleSort), v))
	})
}

// TitleSortIn applies the In predicate on the "title_sort" field.
func TitleSortIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitleSort), v...))
	})
}

// TitleSortNotIn applies the NotIn predicate on the "title_sort" field.
func TitleSortNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitleSort), v...))
	})
}

// TitleSortGT applies the GT predicate on the "title_sort" field.
func TitleSortGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitleSort), v))
	})
}

// TitleSortGTE applies the GTE predicate on the "title_sort" field.
func TitleSortGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitleSort), v))
	})
}

// TitleSortLT applies the LT predicate on the "title_sort" field.
func TitleSortLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitleSort), v))
	})
}

// TitleSortLTE applies the LTE predicate on the "title_sort" field.
func TitleSortLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitleSort), v))
	})
}

// TitleSortContains applies the Contains predicate on the "title_sort" field.
func TitleSortContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitleSort), v))
	})
}

// TitleSortHasPrefix applies the HasPrefix predicate on the "title_sort" field.
func TitleSortHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitleSort), v))
	})
}

// TitleSortHasSuffix applies the HasSuffix predicate on the "title_sort" field.
func TitleSortHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitleSort), v))
	})
}

// TitleSortIsNil applies the IsNil predicate on the "title_sort" field.
func TitleSortIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitleSort)))
	})
}

// TitleSortNotNil applies the NotNil predicate on the "title_sort" field.
func TitleSortNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitleSort)))
	})
}

// TitleSortEqualFold applies the EqualFold predicate on the "title_sort" field.
func TitleSortEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitleSort), v))
	})
}

// TitleSortContainsFold applies the ContainsFold predicate on the "title_sort" field.
func TitleSortContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitleSort), v))
	})
}

// ArtistsIsNil applies the IsNil predicate on the "artists" field.
func ArtistsIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArtists)))
	})
}

// ArtistsNotNil applies the NotNil predicate on the "artists" field.
func ArtistsNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArtists)))
	})
}

// FirstArtistEQ applies the EQ predicate on the "first_artist" field.
func FirstArtistEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistNEQ applies the NEQ predicate on the "first_artist" field.
func FirstArtistNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistIn applies the In predicate on the "first_artist" field.
func FirstArtistIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstArtist), v...))
	})
}

// FirstArtistNotIn applies the NotIn predicate on the "first_artist" field.
func FirstArtistNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstArtist), v...))
	})
}

// FirstArtistGT applies the GT predicate on the "first_artist" field.
func FirstArtistGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistGTE applies the GTE predicate on the "first_artist" field.
func FirstArtistGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistLT applies the LT predicate on the "first_artist" field.
func FirstArtistLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistLTE applies the LTE predicate on the "first_artist" field.
func FirstArtistLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistContains applies the Contains predicate on the "first_artist" field.
func FirstArtistContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistHasPrefix applies the HasPrefix predicate on the "first_artist" field.
func FirstArtistHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistHasSuffix applies the HasSuffix predicate on the "first_artist" field.
func FirstArtistHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistIsNil applies the IsNil predicate on the "first_artist" field.
func FirstArtistIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstArtist)))
	})
}

// FirstArtistNotNil applies the NotNil predicate on the "first_artist" field.
func FirstArtistNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstArtist)))
	})
}

// FirstArtistEqualFold applies the EqualFold predicate on the "first_artist" field.
func FirstArtistEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistContainsFold applies the ContainsFold predicate on the "first_artist" field.
func FirstArtistContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstArtist), v))
	})
}

// FirstArtistSortEQ applies the EQ predicate on the "first_artist_sort" field.
func FirstArtistSortEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortNEQ applies the NEQ predicate on the "first_artist_sort" field.
func FirstArtistSortNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortIn applies the In predicate on the "first_artist_sort" field.
func FirstArtistSortIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstArtistSort), v...))
	})
}

// FirstArtistSortNotIn applies the NotIn predicate on the "first_artist_sort" field.
func FirstArtistSortNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstArtistSort), v...))
	})
}

// FirstArtistSortGT applies the GT predicate on the "first_artist_sort" field.
func FirstArtistSortGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortGTE applies the GTE predicate on the "first_artist_sort" field.
func FirstArtistSortGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortLT applies the LT predicate on the "first_artist_sort" field.
func FirstArtistSortLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortLTE applies the LTE predicate on the "first_artist_sort" field.
func FirstArtistSortLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortContains applies the Contains predicate on the "first_artist_sort" field.
func FirstArtistSortContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortHasPrefix applies the HasPrefix predicate on the "first_artist_sort" field.
func FirstArtistSortHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortHasSuffix applies the HasSuffix predicate on the "first_artist_sort" field.
func FirstArtistSortHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortIsNil applies the IsNil predicate on the "first_artist_sort" field.
func FirstArtistSortIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstArtistSort)))
	})
}

// FirstArtistSortNotNil applies the NotNil predicate on the "first_artist_sort" field.
func FirstArtistSortNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstArtistSort)))
	})
}

// FirstArtistSortEqualFold applies the EqualFold predicate on the "first_artist_sort" field.
func FirstArtistSortEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstArtistSort), v))
	})
}

// FirstArtistSortContainsFold applies the ContainsFold predicate on the "first_artist_sort" field.
func FirstArtistSortContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstArtistSort), v))
	})
}

// FirstAlbumArtistEQ applies the EQ predicate on the "first_album_artist" field.
func FirstAlbumArtistEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistNEQ applies the NEQ predicate on the "first_album_artist" field.
func FirstAlbumArtistNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistIn applies the In predicate on the "first_album_artist" field.
func FirstAlbumArtistIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstAlbumArtist), v...))
	})
}

// FirstAlbumArtistNotIn applies the NotIn predicate on the "first_album_artist" field.
func FirstAlbumArtistNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstAlbumArtist), v...))
	})
}

// FirstAlbumArtistGT applies the GT predicate on the "first_album_artist" field.
func FirstAlbumArtistGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistGTE applies the GTE predicate on the "first_album_artist" field.
func FirstAlbumArtistGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistLT applies the LT predicate on the "first_album_artist" field.
func FirstAlbumArtistLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistLTE applies the LTE predicate on the "first_album_artist" field.
func FirstAlbumArtistLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistContains applies the Contains predicate on the "first_album_artist" field.
func FirstAlbumArtistContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistHasPrefix applies the HasPrefix predicate on the "first_album_artist" field.
func FirstAlbumArtistHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistHasSuffix applies the HasSuffix predicate on the "first_album_artist" field.
func FirstAlbumArtistHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistIsNil applies the IsNil predicate on the "first_album_artist" field.
func FirstAlbumArtistIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstAlbumArtist)))
	})
}

// FirstAlbumArtistNotNil applies the NotNil predicate on the "first_album_artist" field.
func FirstAlbumArtistNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstAlbumArtist)))
	})
}

// FirstAlbumArtistEqualFold applies the EqualFold predicate on the "first_album_artist" field.
func FirstAlbumArtistEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistContainsFold applies the ContainsFold predicate on the "first_album_artist" field.
func FirstAlbumArtistContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstAlbumArtist), v))
	})
}

// FirstAlbumArtistSortEQ applies the EQ predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortNEQ applies the NEQ predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortIn applies the In predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstAlbumArtistSort), v...))
	})
}

// FirstAlbumArtistSortNotIn applies the NotIn predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstAlbumArtistSort), v...))
	})
}

// FirstAlbumArtistSortGT applies the GT predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortGTE applies the GTE predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortLT applies the LT predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortLTE applies the LTE predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortContains applies the Contains predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortHasPrefix applies the HasPrefix predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortHasSuffix applies the HasSuffix predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortIsNil applies the IsNil predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstAlbumArtistSort)))
	})
}

// FirstAlbumArtistSortNotNil applies the NotNil predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstAlbumArtistSort)))
	})
}

// FirstAlbumArtistSortEqualFold applies the EqualFold predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// FirstAlbumArtistSortContainsFold applies the ContainsFold predicate on the "first_album_artist_sort" field.
func FirstAlbumArtistSortContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstAlbumArtistSort), v))
	})
}

// AlbumArtistEQ applies the EQ predicate on the "album_artist" field.
func AlbumArtistEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistNEQ applies the NEQ predicate on the "album_artist" field.
func AlbumArtistNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistIn applies the In predicate on the "album_artist" field.
func AlbumArtistIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlbumArtist), v...))
	})
}

// AlbumArtistNotIn applies the NotIn predicate on the "album_artist" field.
func AlbumArtistNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlbumArtist), v...))
	})
}

// AlbumArtistGT applies the GT predicate on the "album_artist" field.
func AlbumArtistGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistGTE applies the GTE predicate on the "album_artist" field.
func AlbumArtistGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistLT applies the LT predicate on the "album_artist" field.
func AlbumArtistLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistLTE applies the LTE predicate on the "album_artist" field.
func AlbumArtistLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistContains applies the Contains predicate on the "album_artist" field.
func AlbumArtistContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistHasPrefix applies the HasPrefix predicate on the "album_artist" field.
func AlbumArtistHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistHasSuffix applies the HasSuffix predicate on the "album_artist" field.
func AlbumArtistHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistIsNil applies the IsNil predicate on the "album_artist" field.
func AlbumArtistIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlbumArtist)))
	})
}

// AlbumArtistNotNil applies the NotNil predicate on the "album_artist" field.
func AlbumArtistNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlbumArtist)))
	})
}

// AlbumArtistEqualFold applies the EqualFold predicate on the "album_artist" field.
func AlbumArtistEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlbumArtist), v))
	})
}

// AlbumArtistContainsFold applies the ContainsFold predicate on the "album_artist" field.
func AlbumArtistContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlbumArtist), v))
	})
}

// AlbumEQ applies the EQ predicate on the "album" field.
func AlbumEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbum), v))
	})
}

// AlbumNEQ applies the NEQ predicate on the "album" field.
func AlbumNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlbum), v))
	})
}

// AlbumIn applies the In predicate on the "album" field.
func AlbumIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlbum), v...))
	})
}

// AlbumNotIn applies the NotIn predicate on the "album" field.
func AlbumNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlbum), v...))
	})
}

// AlbumGT applies the GT predicate on the "album" field.
func AlbumGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlbum), v))
	})
}

// AlbumGTE applies the GTE predicate on the "album" field.
func AlbumGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlbum), v))
	})
}

// AlbumLT applies the LT predicate on the "album" field.
func AlbumLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlbum), v))
	})
}

// AlbumLTE applies the LTE predicate on the "album" field.
func AlbumLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlbum), v))
	})
}

// AlbumContains applies the Contains predicate on the "album" field.
func AlbumContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlbum), v))
	})
}

// AlbumHasPrefix applies the HasPrefix predicate on the "album" field.
func AlbumHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlbum), v))
	})
}

// AlbumHasSuffix applies the HasSuffix predicate on the "album" field.
func AlbumHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlbum), v))
	})
}

// AlbumIsNil applies the IsNil predicate on the "album" field.
func AlbumIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlbum)))
	})
}

// AlbumNotNil applies the NotNil predicate on the "album" field.
func AlbumNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlbum)))
	})
}

// AlbumEqualFold applies the EqualFold predicate on the "album" field.
func AlbumEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlbum), v))
	})
}

// AlbumContainsFold applies the ContainsFold predicate on the "album" field.
func AlbumContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlbum), v))
	})
}

// PublisherEQ applies the EQ predicate on the "publisher" field.
func PublisherEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublisher), v))
	})
}

// PublisherNEQ applies the NEQ predicate on the "publisher" field.
func PublisherNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublisher), v))
	})
}

// PublisherIn applies the In predicate on the "publisher" field.
func PublisherIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublisher), v...))
	})
}

// PublisherNotIn applies the NotIn predicate on the "publisher" field.
func PublisherNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublisher), v...))
	})
}

// PublisherGT applies the GT predicate on the "publisher" field.
func PublisherGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublisher), v))
	})
}

// PublisherGTE applies the GTE predicate on the "publisher" field.
func PublisherGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublisher), v))
	})
}

// PublisherLT applies the LT predicate on the "publisher" field.
func PublisherLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublisher), v))
	})
}

// PublisherLTE applies the LTE predicate on the "publisher" field.
func PublisherLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublisher), v))
	})
}

// PublisherContains applies the Contains predicate on the "publisher" field.
func PublisherContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublisher), v))
	})
}

// PublisherHasPrefix applies the HasPrefix predicate on the "publisher" field.
func PublisherHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublisher), v))
	})
}

// PublisherHasSuffix applies the HasSuffix predicate on the "publisher" field.
func PublisherHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublisher), v))
	})
}

// PublisherIsNil applies the IsNil predicate on the "publisher" field.
func PublisherIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublisher)))
	})
}

// PublisherNotNil applies the NotNil predicate on the "publisher" field.
func PublisherNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublisher)))
	})
}

// PublisherEqualFold applies the EqualFold predicate on the "publisher" field.
func PublisherEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublisher), v))
	})
}

// PublisherContainsFold applies the ContainsFold predicate on the "publisher" field.
func PublisherContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublisher), v))
	})
}

// FirstComposerEQ applies the EQ predicate on the "first_composer" field.
func FirstComposerEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerNEQ applies the NEQ predicate on the "first_composer" field.
func FirstComposerNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerIn applies the In predicate on the "first_composer" field.
func FirstComposerIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstComposer), v...))
	})
}

// FirstComposerNotIn applies the NotIn predicate on the "first_composer" field.
func FirstComposerNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstComposer), v...))
	})
}

// FirstComposerGT applies the GT predicate on the "first_composer" field.
func FirstComposerGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerGTE applies the GTE predicate on the "first_composer" field.
func FirstComposerGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerLT applies the LT predicate on the "first_composer" field.
func FirstComposerLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerLTE applies the LTE predicate on the "first_composer" field.
func FirstComposerLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerContains applies the Contains predicate on the "first_composer" field.
func FirstComposerContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerHasPrefix applies the HasPrefix predicate on the "first_composer" field.
func FirstComposerHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerHasSuffix applies the HasSuffix predicate on the "first_composer" field.
func FirstComposerHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerIsNil applies the IsNil predicate on the "first_composer" field.
func FirstComposerIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstComposer)))
	})
}

// FirstComposerNotNil applies the NotNil predicate on the "first_composer" field.
func FirstComposerNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstComposer)))
	})
}

// FirstComposerEqualFold applies the EqualFold predicate on the "first_composer" field.
func FirstComposerEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstComposer), v))
	})
}

// FirstComposerContainsFold applies the ContainsFold predicate on the "first_composer" field.
func FirstComposerContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstComposer), v))
	})
}

// ComposersEQ applies the EQ predicate on the "composers" field.
func ComposersEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComposers), v))
	})
}

// ComposersNEQ applies the NEQ predicate on the "composers" field.
func ComposersNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComposers), v))
	})
}

// ComposersIn applies the In predicate on the "composers" field.
func ComposersIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComposers), v...))
	})
}

// ComposersNotIn applies the NotIn predicate on the "composers" field.
func ComposersNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComposers), v...))
	})
}

// ComposersGT applies the GT predicate on the "composers" field.
func ComposersGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComposers), v))
	})
}

// ComposersGTE applies the GTE predicate on the "composers" field.
func ComposersGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComposers), v))
	})
}

// ComposersLT applies the LT predicate on the "composers" field.
func ComposersLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComposers), v))
	})
}

// ComposersLTE applies the LTE predicate on the "composers" field.
func ComposersLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComposers), v))
	})
}

// ComposersContains applies the Contains predicate on the "composers" field.
func ComposersContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComposers), v))
	})
}

// ComposersHasPrefix applies the HasPrefix predicate on the "composers" field.
func ComposersHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComposers), v))
	})
}

// ComposersHasSuffix applies the HasSuffix predicate on the "composers" field.
func ComposersHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComposers), v))
	})
}

// ComposersIsNil applies the IsNil predicate on the "composers" field.
func ComposersIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComposers)))
	})
}

// ComposersNotNil applies the NotNil predicate on the "composers" field.
func ComposersNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComposers)))
	})
}

// ComposersEqualFold applies the EqualFold predicate on the "composers" field.
func ComposersEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComposers), v))
	})
}

// ComposersContainsFold applies the ContainsFold predicate on the "composers" field.
func ComposersContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComposers), v))
	})
}

// ConductorEQ applies the EQ predicate on the "conductor" field.
func ConductorEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConductor), v))
	})
}

// ConductorNEQ applies the NEQ predicate on the "conductor" field.
func ConductorNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConductor), v))
	})
}

// ConductorIn applies the In predicate on the "conductor" field.
func ConductorIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConductor), v...))
	})
}

// ConductorNotIn applies the NotIn predicate on the "conductor" field.
func ConductorNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConductor), v...))
	})
}

// ConductorGT applies the GT predicate on the "conductor" field.
func ConductorGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConductor), v))
	})
}

// ConductorGTE applies the GTE predicate on the "conductor" field.
func ConductorGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConductor), v))
	})
}

// ConductorLT applies the LT predicate on the "conductor" field.
func ConductorLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConductor), v))
	})
}

// ConductorLTE applies the LTE predicate on the "conductor" field.
func ConductorLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConductor), v))
	})
}

// ConductorContains applies the Contains predicate on the "conductor" field.
func ConductorContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConductor), v))
	})
}

// ConductorHasPrefix applies the HasPrefix predicate on the "conductor" field.
func ConductorHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConductor), v))
	})
}

// ConductorHasSuffix applies the HasSuffix predicate on the "conductor" field.
func ConductorHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConductor), v))
	})
}

// ConductorIsNil applies the IsNil predicate on the "conductor" field.
func ConductorIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConductor)))
	})
}

// ConductorNotNil applies the NotNil predicate on the "conductor" field.
func ConductorNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConductor)))
	})
}

// ConductorEqualFold applies the EqualFold predicate on the "conductor" field.
func ConductorEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConductor), v))
	})
}

// ConductorContainsFold applies the ContainsFold predicate on the "conductor" field.
func ConductorContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConductor), v))
	})
}

// GenreEQ applies the EQ predicate on the "genre" field.
func GenreEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenre), v))
	})
}

// GenreNEQ applies the NEQ predicate on the "genre" field.
func GenreNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGenre), v))
	})
}

// GenreIn applies the In predicate on the "genre" field.
func GenreIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGenre), v...))
	})
}

// GenreNotIn applies the NotIn predicate on the "genre" field.
func GenreNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGenre), v...))
	})
}

// GenreGT applies the GT predicate on the "genre" field.
func GenreGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGenre), v))
	})
}

// GenreGTE applies the GTE predicate on the "genre" field.
func GenreGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGenre), v))
	})
}

// GenreLT applies the LT predicate on the "genre" field.
func GenreLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGenre), v))
	})
}

// GenreLTE applies the LTE predicate on the "genre" field.
func GenreLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGenre), v))
	})
}

// GenreContains applies the Contains predicate on the "genre" field.
func GenreContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGenre), v))
	})
}

// GenreHasPrefix applies the HasPrefix predicate on the "genre" field.
func GenreHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGenre), v))
	})
}

// GenreHasSuffix applies the HasSuffix predicate on the "genre" field.
func GenreHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGenre), v))
	})
}

// GenreIsNil applies the IsNil predicate on the "genre" field.
func GenreIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGenre)))
	})
}

// GenreNotNil applies the NotNil predicate on the "genre" field.
func GenreNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGenre)))
	})
}

// GenreEqualFold applies the EqualFold predicate on the "genre" field.
func GenreEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGenre), v))
	})
}

// GenreContainsFold applies the ContainsFold predicate on the "genre" field.
func GenreContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGenre), v))
	})
}

// GroupingEQ applies the EQ predicate on the "grouping" field.
func GroupingEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrouping), v))
	})
}

// GroupingNEQ applies the NEQ predicate on the "grouping" field.
func GroupingNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrouping), v))
	})
}

// GroupingIn applies the In predicate on the "grouping" field.
func GroupingIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGrouping), v...))
	})
}

// GroupingNotIn applies the NotIn predicate on the "grouping" field.
func GroupingNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGrouping), v...))
	})
}

// GroupingGT applies the GT predicate on the "grouping" field.
func GroupingGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrouping), v))
	})
}

// GroupingGTE applies the GTE predicate on the "grouping" field.
func GroupingGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrouping), v))
	})
}

// GroupingLT applies the LT predicate on the "grouping" field.
func GroupingLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrouping), v))
	})
}

// GroupingLTE applies the LTE predicate on the "grouping" field.
func GroupingLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrouping), v))
	})
}

// GroupingContains applies the Contains predicate on the "grouping" field.
func GroupingContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGrouping), v))
	})
}

// GroupingHasPrefix applies the HasPrefix predicate on the "grouping" field.
func GroupingHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGrouping), v))
	})
}

// GroupingHasSuffix applies the HasSuffix predicate on the "grouping" field.
func GroupingHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGrouping), v))
	})
}

// GroupingIsNil applies the IsNil predicate on the "grouping" field.
func GroupingIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGrouping)))
	})
}

// GroupingNotNil applies the NotNil predicate on the "grouping" field.
func GroupingNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGrouping)))
	})
}

// GroupingEqualFold applies the EqualFold predicate on the "grouping" field.
func GroupingEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGrouping), v))
	})
}

// GroupingContainsFold applies the ContainsFold predicate on the "grouping" field.
func GroupingContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGrouping), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// YearIsNil applies the IsNil predicate on the "year" field.
func YearIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYear)))
	})
}

// YearNotNil applies the NotNil predicate on the "year" field.
func YearNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYear)))
	})
}

// TrackNumberEQ applies the EQ predicate on the "track_number" field.
func TrackNumberEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberNEQ applies the NEQ predicate on the "track_number" field.
func TrackNumberNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberIn applies the In predicate on the "track_number" field.
func TrackNumberIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackNumber), v...))
	})
}

// TrackNumberNotIn applies the NotIn predicate on the "track_number" field.
func TrackNumberNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackNumber), v...))
	})
}

// TrackNumberGT applies the GT predicate on the "track_number" field.
func TrackNumberGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberGTE applies the GTE predicate on the "track_number" field.
func TrackNumberGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberLT applies the LT predicate on the "track_number" field.
func TrackNumberLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberLTE applies the LTE predicate on the "track_number" field.
func TrackNumberLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberIsNil applies the IsNil predicate on the "track_number" field.
func TrackNumberIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackNumber)))
	})
}

// TrackNumberNotNil applies the NotNil predicate on the "track_number" field.
func TrackNumberNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackNumber)))
	})
}

// OfTrackNumberEQ applies the EQ predicate on the "of_track_number" field.
func OfTrackNumberEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberNEQ applies the NEQ predicate on the "of_track_number" field.
func OfTrackNumberNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberIn applies the In predicate on the "of_track_number" field.
func OfTrackNumberIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfTrackNumber), v...))
	})
}

// OfTrackNumberNotIn applies the NotIn predicate on the "of_track_number" field.
func OfTrackNumberNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfTrackNumber), v...))
	})
}

// OfTrackNumberGT applies the GT predicate on the "of_track_number" field.
func OfTrackNumberGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberGTE applies the GTE predicate on the "of_track_number" field.
func OfTrackNumberGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberLT applies the LT predicate on the "of_track_number" field.
func OfTrackNumberLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberLTE applies the LTE predicate on the "of_track_number" field.
func OfTrackNumberLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfTrackNumber), v))
	})
}

// OfTrackNumberIsNil applies the IsNil predicate on the "of_track_number" field.
func OfTrackNumberIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfTrackNumber)))
	})
}

// OfTrackNumberNotNil applies the NotNil predicate on the "of_track_number" field.
func OfTrackNumberNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfTrackNumber)))
	})
}

// DiskNumberEQ applies the EQ predicate on the "disk_number" field.
func DiskNumberEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberNEQ applies the NEQ predicate on the "disk_number" field.
func DiskNumberNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberIn applies the In predicate on the "disk_number" field.
func DiskNumberIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiskNumber), v...))
	})
}

// DiskNumberNotIn applies the NotIn predicate on the "disk_number" field.
func DiskNumberNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiskNumber), v...))
	})
}

// DiskNumberGT applies the GT predicate on the "disk_number" field.
func DiskNumberGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberGTE applies the GTE predicate on the "disk_number" field.
func DiskNumberGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberLT applies the LT predicate on the "disk_number" field.
func DiskNumberLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberLTE applies the LTE predicate on the "disk_number" field.
func DiskNumberLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiskNumber), v))
	})
}

// DiskNumberIsNil applies the IsNil predicate on the "disk_number" field.
func DiskNumberIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiskNumber)))
	})
}

// DiskNumberNotNil applies the NotNil predicate on the "disk_number" field.
func DiskNumberNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiskNumber)))
	})
}

// OfDiskNumberEQ applies the EQ predicate on the "of_disk_number" field.
func OfDiskNumberEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberNEQ applies the NEQ predicate on the "of_disk_number" field.
func OfDiskNumberNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberIn applies the In predicate on the "of_disk_number" field.
func OfDiskNumberIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfDiskNumber), v...))
	})
}

// OfDiskNumberNotIn applies the NotIn predicate on the "of_disk_number" field.
func OfDiskNumberNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfDiskNumber), v...))
	})
}

// OfDiskNumberGT applies the GT predicate on the "of_disk_number" field.
func OfDiskNumberGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberGTE applies the GTE predicate on the "of_disk_number" field.
func OfDiskNumberGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberLT applies the LT predicate on the "of_disk_number" field.
func OfDiskNumberLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberLTE applies the LTE predicate on the "of_disk_number" field.
func OfDiskNumberLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfDiskNumber), v))
	})
}

// OfDiskNumberIsNil applies the IsNil predicate on the "of_disk_number" field.
func OfDiskNumberIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfDiskNumber)))
	})
}

// OfDiskNumberNotNil applies the NotNil predicate on the "of_disk_number" field.
func OfDiskNumberNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfDiskNumber)))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuration)))
	})
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuration)))
	})
}

// PlayCountEQ applies the EQ predicate on the "play_count" field.
func PlayCountEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayCount), v))
	})
}

// PlayCountNEQ applies the NEQ predicate on the "play_count" field.
func PlayCountNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayCount), v))
	})
}

// PlayCountIn applies the In predicate on the "play_count" field.
func PlayCountIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlayCount), v...))
	})
}

// PlayCountNotIn applies the NotIn predicate on the "play_count" field.
func PlayCountNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlayCount), v...))
	})
}

// PlayCountGT applies the GT predicate on the "play_count" field.
func PlayCountGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayCount), v))
	})
}

// PlayCountGTE applies the GTE predicate on the "play_count" field.
func PlayCountGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayCount), v))
	})
}

// PlayCountLT applies the LT predicate on the "play_count" field.
func PlayCountLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayCount), v))
	})
}

// PlayCountLTE applies the LTE predicate on the "play_count" field.
func PlayCountLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayCount), v))
	})
}

// SkippedCountEQ applies the EQ predicate on the "skipped_count" field.
func SkippedCountEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkippedCount), v))
	})
}

// SkippedCountNEQ applies the NEQ predicate on the "skipped_count" field.
func SkippedCountNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkippedCount), v))
	})
}

// SkippedCountIn applies the In predicate on the "skipped_count" field.
func SkippedCountIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSkippedCount), v...))
	})
}

// SkippedCountNotIn applies the NotIn predicate on the "skipped_count" field.
func SkippedCountNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSkippedCount), v...))
	})
}

// SkippedCountGT applies the GT predicate on the "skipped_count" field.
func SkippedCountGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkippedCount), v))
	})
}

// SkippedCountGTE applies the GTE predicate on the "skipped_count" field.
func SkippedCountGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkippedCount), v))
	})
}

// SkippedCountLT applies the LT predicate on the "skipped_count" field.
func SkippedCountLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkippedCount), v))
	})
}

// SkippedCountLTE applies the LTE predicate on the "skipped_count" field.
func SkippedCountLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkippedCount), v))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// BeatsPerMinuteEQ applies the EQ predicate on the "beats_per_minute" field.
func BeatsPerMinuteEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteNEQ applies the NEQ predicate on the "beats_per_minute" field.
func BeatsPerMinuteNEQ(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteIn applies the In predicate on the "beats_per_minute" field.
func BeatsPerMinuteIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBeatsPerMinute), v...))
	})
}

// BeatsPerMinuteNotIn applies the NotIn predicate on the "beats_per_minute" field.
func BeatsPerMinuteNotIn(vs ...uint) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBeatsPerMinute), v...))
	})
}

// BeatsPerMinuteGT applies the GT predicate on the "beats_per_minute" field.
func BeatsPerMinuteGT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteGTE applies the GTE predicate on the "beats_per_minute" field.
func BeatsPerMinuteGTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteLT applies the LT predicate on the "beats_per_minute" field.
func BeatsPerMinuteLT(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteLTE applies the LTE predicate on the "beats_per_minute" field.
func BeatsPerMinuteLTE(v uint) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeatsPerMinute), v))
	})
}

// BeatsPerMinuteIsNil applies the IsNil predicate on the "beats_per_minute" field.
func BeatsPerMinuteIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBeatsPerMinute)))
	})
}

// BeatsPerMinuteNotNil applies the NotNil predicate on the "beats_per_minute" field.
func BeatsPerMinuteNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBeatsPerMinute)))
	})
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyright), v))
	})
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCopyright), v))
	})
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCopyright), v...))
	})
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCopyright), v...))
	})
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCopyright), v))
	})
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCopyright), v))
	})
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCopyright), v))
	})
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCopyright), v))
	})
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCopyright), v))
	})
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCopyright), v))
	})
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCopyright), v))
	})
}

// CopyrightIsNil applies the IsNil predicate on the "copyright" field.
func CopyrightIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCopyright)))
	})
}

// CopyrightNotNil applies the NotNil predicate on the "copyright" field.
func CopyrightNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCopyright)))
	})
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCopyright), v))
	})
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCopyright), v))
	})
}

// DateTaggedEQ applies the EQ predicate on the "date_tagged" field.
func DateTaggedEQ(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateTagged), v))
	})
}

// DateTaggedNEQ applies the NEQ predicate on the "date_tagged" field.
func DateTaggedNEQ(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateTagged), v))
	})
}

// DateTaggedIn applies the In predicate on the "date_tagged" field.
func DateTaggedIn(vs ...time.Time) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateTagged), v...))
	})
}

// DateTaggedNotIn applies the NotIn predicate on the "date_tagged" field.
func DateTaggedNotIn(vs ...time.Time) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateTagged), v...))
	})
}

// DateTaggedGT applies the GT predicate on the "date_tagged" field.
func DateTaggedGT(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateTagged), v))
	})
}

// DateTaggedGTE applies the GTE predicate on the "date_tagged" field.
func DateTaggedGTE(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateTagged), v))
	})
}

// DateTaggedLT applies the LT predicate on the "date_tagged" field.
func DateTaggedLT(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateTagged), v))
	})
}

// DateTaggedLTE applies the LTE predicate on the "date_tagged" field.
func DateTaggedLTE(v time.Time) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateTagged), v))
	})
}

// DateTaggedIsNil applies the IsNil predicate on the "date_tagged" field.
func DateTaggedIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateTagged)))
	})
}

// DateTaggedNotNil applies the NotNil predicate on the "date_tagged" field.
func DateTaggedNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateTagged)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// FirstComposerSortEQ applies the EQ predicate on the "first_composer_sort" field.
func FirstComposerSortEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortNEQ applies the NEQ predicate on the "first_composer_sort" field.
func FirstComposerSortNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortIn applies the In predicate on the "first_composer_sort" field.
func FirstComposerSortIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstComposerSort), v...))
	})
}

// FirstComposerSortNotIn applies the NotIn predicate on the "first_composer_sort" field.
func FirstComposerSortNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstComposerSort), v...))
	})
}

// FirstComposerSortGT applies the GT predicate on the "first_composer_sort" field.
func FirstComposerSortGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortGTE applies the GTE predicate on the "first_composer_sort" field.
func FirstComposerSortGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortLT applies the LT predicate on the "first_composer_sort" field.
func FirstComposerSortLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortLTE applies the LTE predicate on the "first_composer_sort" field.
func FirstComposerSortLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortContains applies the Contains predicate on the "first_composer_sort" field.
func FirstComposerSortContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortHasPrefix applies the HasPrefix predicate on the "first_composer_sort" field.
func FirstComposerSortHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortHasSuffix applies the HasSuffix predicate on the "first_composer_sort" field.
func FirstComposerSortHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortIsNil applies the IsNil predicate on the "first_composer_sort" field.
func FirstComposerSortIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstComposerSort)))
	})
}

// FirstComposerSortNotNil applies the NotNil predicate on the "first_composer_sort" field.
func FirstComposerSortNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstComposerSort)))
	})
}

// FirstComposerSortEqualFold applies the EqualFold predicate on the "first_composer_sort" field.
func FirstComposerSortEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstComposerSort), v))
	})
}

// FirstComposerSortContainsFold applies the ContainsFold predicate on the "first_composer_sort" field.
func FirstComposerSortContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstComposerSort), v))
	})
}

// ArtistsSortEQ applies the EQ predicate on the "artists_sort" field.
func ArtistsSortEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortNEQ applies the NEQ predicate on the "artists_sort" field.
func ArtistsSortNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortIn applies the In predicate on the "artists_sort" field.
func ArtistsSortIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArtistsSort), v...))
	})
}

// ArtistsSortNotIn applies the NotIn predicate on the "artists_sort" field.
func ArtistsSortNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArtistsSort), v...))
	})
}

// ArtistsSortGT applies the GT predicate on the "artists_sort" field.
func ArtistsSortGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortGTE applies the GTE predicate on the "artists_sort" field.
func ArtistsSortGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortLT applies the LT predicate on the "artists_sort" field.
func ArtistsSortLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortLTE applies the LTE predicate on the "artists_sort" field.
func ArtistsSortLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortContains applies the Contains predicate on the "artists_sort" field.
func ArtistsSortContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortHasPrefix applies the HasPrefix predicate on the "artists_sort" field.
func ArtistsSortHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortHasSuffix applies the HasSuffix predicate on the "artists_sort" field.
func ArtistsSortHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortIsNil applies the IsNil predicate on the "artists_sort" field.
func ArtistsSortIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArtistsSort)))
	})
}

// ArtistsSortNotNil applies the NotNil predicate on the "artists_sort" field.
func ArtistsSortNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArtistsSort)))
	})
}

// ArtistsSortEqualFold applies the EqualFold predicate on the "artists_sort" field.
func ArtistsSortEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArtistsSort), v))
	})
}

// ArtistsSortContainsFold applies the ContainsFold predicate on the "artists_sort" field.
func ArtistsSortContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArtistsSort), v))
	})
}

// LyricsEQ applies the EQ predicate on the "lyrics" field.
func LyricsEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLyrics), v))
	})
}

// LyricsNEQ applies the NEQ predicate on the "lyrics" field.
func LyricsNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLyrics), v))
	})
}

// LyricsIn applies the In predicate on the "lyrics" field.
func LyricsIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLyrics), v...))
	})
}

// LyricsNotIn applies the NotIn predicate on the "lyrics" field.
func LyricsNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLyrics), v...))
	})
}

// LyricsGT applies the GT predicate on the "lyrics" field.
func LyricsGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLyrics), v))
	})
}

// LyricsGTE applies the GTE predicate on the "lyrics" field.
func LyricsGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLyrics), v))
	})
}

// LyricsLT applies the LT predicate on the "lyrics" field.
func LyricsLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLyrics), v))
	})
}

// LyricsLTE applies the LTE predicate on the "lyrics" field.
func LyricsLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLyrics), v))
	})
}

// LyricsContains applies the Contains predicate on the "lyrics" field.
func LyricsContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLyrics), v))
	})
}

// LyricsHasPrefix applies the HasPrefix predicate on the "lyrics" field.
func LyricsHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLyrics), v))
	})
}

// LyricsHasSuffix applies the HasSuffix predicate on the "lyrics" field.
func LyricsHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLyrics), v))
	})
}

// LyricsIsNil applies the IsNil predicate on the "lyrics" field.
func LyricsIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLyrics)))
	})
}

// LyricsNotNil applies the NotNil predicate on the "lyrics" field.
func LyricsNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLyrics)))
	})
}

// LyricsEqualFold applies the EqualFold predicate on the "lyrics" field.
func LyricsEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLyrics), v))
	})
}

// LyricsContainsFold applies the ContainsFold predicate on the "lyrics" field.
func LyricsContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLyrics), v))
	})
}

// InitialKeyEQ applies the EQ predicate on the "initial_key" field.
func InitialKeyEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialKey), v))
	})
}

// InitialKeyNEQ applies the NEQ predicate on the "initial_key" field.
func InitialKeyNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInitialKey), v))
	})
}

// InitialKeyIn applies the In predicate on the "initial_key" field.
func InitialKeyIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInitialKey), v...))
	})
}

// InitialKeyNotIn applies the NotIn predicate on the "initial_key" field.
func InitialKeyNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInitialKey), v...))
	})
}

// InitialKeyGT applies the GT predicate on the "initial_key" field.
func InitialKeyGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInitialKey), v))
	})
}

// InitialKeyGTE applies the GTE predicate on the "initial_key" field.
func InitialKeyGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInitialKey), v))
	})
}

// InitialKeyLT applies the LT predicate on the "initial_key" field.
func InitialKeyLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInitialKey), v))
	})
}

// InitialKeyLTE applies the LTE predicate on the "initial_key" field.
func InitialKeyLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInitialKey), v))
	})
}

// InitialKeyContains applies the Contains predicate on the "initial_key" field.
func InitialKeyContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInitialKey), v))
	})
}

// InitialKeyHasPrefix applies the HasPrefix predicate on the "initial_key" field.
func InitialKeyHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInitialKey), v))
	})
}

// InitialKeyHasSuffix applies the HasSuffix predicate on the "initial_key" field.
func InitialKeyHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInitialKey), v))
	})
}

// InitialKeyIsNil applies the IsNil predicate on the "initial_key" field.
func InitialKeyIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInitialKey)))
	})
}

// InitialKeyNotNil applies the NotNil predicate on the "initial_key" field.
func InitialKeyNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInitialKey)))
	})
}

// InitialKeyEqualFold applies the EqualFold predicate on the "initial_key" field.
func InitialKeyEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInitialKey), v))
	})
}

// InitialKeyContainsFold applies the ContainsFold predicate on the "initial_key" field.
func InitialKeyContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInitialKey), v))
	})
}

// IsrcEQ applies the EQ predicate on the "isrc" field.
func IsrcEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsrc), v))
	})
}

// IsrcNEQ applies the NEQ predicate on the "isrc" field.
func IsrcNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsrc), v))
	})
}

// IsrcIn applies the In predicate on the "isrc" field.
func IsrcIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsrc), v...))
	})
}

// IsrcNotIn applies the NotIn predicate on the "isrc" field.
func IsrcNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsrc), v...))
	})
}

// IsrcGT applies the GT predicate on the "isrc" field.
func IsrcGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsrc), v))
	})
}

// IsrcGTE applies the GTE predicate on the "isrc" field.
func IsrcGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsrc), v))
	})
}

// IsrcLT applies the LT predicate on the "isrc" field.
func IsrcLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsrc), v))
	})
}

// IsrcLTE applies the LTE predicate on the "isrc" field.
func IsrcLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsrc), v))
	})
}

// IsrcContains applies the Contains predicate on the "isrc" field.
func IsrcContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsrc), v))
	})
}

// IsrcHasPrefix applies the HasPrefix predicate on the "isrc" field.
func IsrcHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsrc), v))
	})
}

// IsrcHasSuffix applies the HasSuffix predicate on the "isrc" field.
func IsrcHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsrc), v))
	})
}

// IsrcIsNil applies the IsNil predicate on the "isrc" field.
func IsrcIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsrc)))
	})
}

// IsrcNotNil applies the NotNil predicate on the "isrc" field.
func IsrcNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsrc)))
	})
}

// IsrcEqualFold applies the EqualFold predicate on the "isrc" field.
func IsrcEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsrc), v))
	})
}

// IsrcContainsFold applies the ContainsFold predicate on the "isrc" field.
func IsrcContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsrc), v))
	})
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubtitle), v...))
	})
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubtitle), v...))
	})
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtitle), v))
	})
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtitle), v))
	})
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubtitle), v))
	})
}

// SubtitleIsNil applies the IsNil predicate on the "subtitle" field.
func SubtitleIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubtitle)))
	})
}

// SubtitleNotNil applies the NotNil predicate on the "subtitle" field.
func SubtitleNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubtitle)))
	})
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubtitle), v))
	})
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubtitle), v))
	})
}

// MusicBrainzArtistIDEQ applies the EQ predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDNEQ applies the NEQ predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDIn applies the In predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzArtistID), v...))
	})
}

// MusicBrainzArtistIDNotIn applies the NotIn predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzArtistID), v...))
	})
}

// MusicBrainzArtistIDGT applies the GT predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDGTE applies the GTE predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDLT applies the LT predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDLTE applies the LTE predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDContains applies the Contains predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDHasPrefix applies the HasPrefix predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDHasSuffix applies the HasSuffix predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDIsNil applies the IsNil predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzArtistID)))
	})
}

// MusicBrainzArtistIDNotNil applies the NotNil predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzArtistID)))
	})
}

// MusicBrainzArtistIDEqualFold applies the EqualFold predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzArtistIDContainsFold applies the ContainsFold predicate on the "music_brainz_artist_id" field.
func MusicBrainzArtistIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzArtistID), v))
	})
}

// MusicBrainzDiscIDEQ applies the EQ predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDNEQ applies the NEQ predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDIn applies the In predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzDiscID), v...))
	})
}

// MusicBrainzDiscIDNotIn applies the NotIn predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzDiscID), v...))
	})
}

// MusicBrainzDiscIDGT applies the GT predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDGTE applies the GTE predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDLT applies the LT predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDLTE applies the LTE predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDContains applies the Contains predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDHasPrefix applies the HasPrefix predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDHasSuffix applies the HasSuffix predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDIsNil applies the IsNil predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzDiscID)))
	})
}

// MusicBrainzDiscIDNotNil applies the NotNil predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzDiscID)))
	})
}

// MusicBrainzDiscIDEqualFold applies the EqualFold predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzDiscIDContainsFold applies the ContainsFold predicate on the "music_brainz_disc_id" field.
func MusicBrainzDiscIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzDiscID), v))
	})
}

// MusicBrainzReleaseArtistIDEQ applies the EQ predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDNEQ applies the NEQ predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDIn applies the In predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseArtistID), v...))
	})
}

// MusicBrainzReleaseArtistIDNotIn applies the NotIn predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseArtistID), v...))
	})
}

// MusicBrainzReleaseArtistIDGT applies the GT predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDGTE applies the GTE predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDLT applies the LT predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDLTE applies the LTE predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDContains applies the Contains predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDHasPrefix applies the HasPrefix predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDHasSuffix applies the HasSuffix predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDIsNil applies the IsNil predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseArtistID)))
	})
}

// MusicBrainzReleaseArtistIDNotNil applies the NotNil predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseArtistID)))
	})
}

// MusicBrainzReleaseArtistIDEqualFold applies the EqualFold predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseArtistIDContainsFold applies the ContainsFold predicate on the "music_brainz_release_artist_id" field.
func MusicBrainzReleaseArtistIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseArtistID), v))
	})
}

// MusicBrainzReleaseCountryEQ applies the EQ predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryNEQ applies the NEQ predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryIn applies the In predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseCountry), v...))
	})
}

// MusicBrainzReleaseCountryNotIn applies the NotIn predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseCountry), v...))
	})
}

// MusicBrainzReleaseCountryGT applies the GT predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryGTE applies the GTE predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryLT applies the LT predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryLTE applies the LTE predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryContains applies the Contains predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryHasPrefix applies the HasPrefix predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryHasSuffix applies the HasSuffix predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryIsNil applies the IsNil predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseCountry)))
	})
}

// MusicBrainzReleaseCountryNotNil applies the NotNil predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseCountry)))
	})
}

// MusicBrainzReleaseCountryEqualFold applies the EqualFold predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseCountryContainsFold applies the ContainsFold predicate on the "music_brainz_release_country" field.
func MusicBrainzReleaseCountryContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseCountry), v))
	})
}

// MusicBrainzReleaseGroupIDEQ applies the EQ predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDNEQ applies the NEQ predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDIn applies the In predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseGroupID), v...))
	})
}

// MusicBrainzReleaseGroupIDNotIn applies the NotIn predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseGroupID), v...))
	})
}

// MusicBrainzReleaseGroupIDGT applies the GT predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDGTE applies the GTE predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDLT applies the LT predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDLTE applies the LTE predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDContains applies the Contains predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDHasPrefix applies the HasPrefix predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDHasSuffix applies the HasSuffix predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDIsNil applies the IsNil predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseGroupID)))
	})
}

// MusicBrainzReleaseGroupIDNotNil applies the NotNil predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseGroupID)))
	})
}

// MusicBrainzReleaseGroupIDEqualFold applies the EqualFold predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseGroupIDContainsFold applies the ContainsFold predicate on the "music_brainz_release_group_id" field.
func MusicBrainzReleaseGroupIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseGroupID), v))
	})
}

// MusicBrainzReleaseIDEQ applies the EQ predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDNEQ applies the NEQ predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDIn applies the In predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseID), v...))
	})
}

// MusicBrainzReleaseIDNotIn applies the NotIn predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseID), v...))
	})
}

// MusicBrainzReleaseIDGT applies the GT predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDGTE applies the GTE predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDLT applies the LT predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDLTE applies the LTE predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDContains applies the Contains predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDHasPrefix applies the HasPrefix predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDHasSuffix applies the HasSuffix predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDIsNil applies the IsNil predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseID)))
	})
}

// MusicBrainzReleaseIDNotNil applies the NotNil predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseID)))
	})
}

// MusicBrainzReleaseIDEqualFold applies the EqualFold predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseIDContainsFold applies the ContainsFold predicate on the "music_brainz_release_id" field.
func MusicBrainzReleaseIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseID), v))
	})
}

// MusicBrainzReleaseStatusEQ applies the EQ predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusNEQ applies the NEQ predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusIn applies the In predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseStatus), v...))
	})
}

// MusicBrainzReleaseStatusNotIn applies the NotIn predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseStatus), v...))
	})
}

// MusicBrainzReleaseStatusGT applies the GT predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusGTE applies the GTE predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusLT applies the LT predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusLTE applies the LTE predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusContains applies the Contains predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusHasPrefix applies the HasPrefix predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusHasSuffix applies the HasSuffix predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusIsNil applies the IsNil predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseStatus)))
	})
}

// MusicBrainzReleaseStatusNotNil applies the NotNil predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseStatus)))
	})
}

// MusicBrainzReleaseStatusEqualFold applies the EqualFold predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseStatusContainsFold applies the ContainsFold predicate on the "music_brainz_release_status" field.
func MusicBrainzReleaseStatusContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseStatus), v))
	})
}

// MusicBrainzReleaseTypeEQ applies the EQ predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeNEQ applies the NEQ predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeIn applies the In predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzReleaseType), v...))
	})
}

// MusicBrainzReleaseTypeNotIn applies the NotIn predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzReleaseType), v...))
	})
}

// MusicBrainzReleaseTypeGT applies the GT predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeGTE applies the GTE predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeLT applies the LT predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeLTE applies the LTE predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeContains applies the Contains predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeHasPrefix applies the HasPrefix predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeHasSuffix applies the HasSuffix predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeIsNil applies the IsNil predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzReleaseType)))
	})
}

// MusicBrainzReleaseTypeNotNil applies the NotNil predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzReleaseType)))
	})
}

// MusicBrainzReleaseTypeEqualFold applies the EqualFold predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzReleaseTypeContainsFold applies the ContainsFold predicate on the "music_brainz_release_type" field.
func MusicBrainzReleaseTypeContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzReleaseType), v))
	})
}

// MusicBrainzTrackIDEQ applies the EQ predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDNEQ applies the NEQ predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDIn applies the In predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicBrainzTrackID), v...))
	})
}

// MusicBrainzTrackIDNotIn applies the NotIn predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicBrainzTrackID), v...))
	})
}

// MusicBrainzTrackIDGT applies the GT predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDGTE applies the GTE predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDLT applies the LT predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDLTE applies the LTE predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDContains applies the Contains predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDHasPrefix applies the HasPrefix predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDHasSuffix applies the HasSuffix predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDIsNil applies the IsNil predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicBrainzTrackID)))
	})
}

// MusicBrainzTrackIDNotNil applies the NotNil predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicBrainzTrackID)))
	})
}

// MusicBrainzTrackIDEqualFold applies the EqualFold predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicBrainzTrackIDContainsFold applies the ContainsFold predicate on the "music_brainz_track_id" field.
func MusicBrainzTrackIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicBrainzTrackID), v))
	})
}

// MusicIPIDEQ applies the EQ predicate on the "music_ip_id" field.
func MusicIPIDEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDNEQ applies the NEQ predicate on the "music_ip_id" field.
func MusicIPIDNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDIn applies the In predicate on the "music_ip_id" field.
func MusicIPIDIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMusicIPID), v...))
	})
}

// MusicIPIDNotIn applies the NotIn predicate on the "music_ip_id" field.
func MusicIPIDNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMusicIPID), v...))
	})
}

// MusicIPIDGT applies the GT predicate on the "music_ip_id" field.
func MusicIPIDGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDGTE applies the GTE predicate on the "music_ip_id" field.
func MusicIPIDGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDLT applies the LT predicate on the "music_ip_id" field.
func MusicIPIDLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDLTE applies the LTE predicate on the "music_ip_id" field.
func MusicIPIDLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDContains applies the Contains predicate on the "music_ip_id" field.
func MusicIPIDContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDHasPrefix applies the HasPrefix predicate on the "music_ip_id" field.
func MusicIPIDHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDHasSuffix applies the HasSuffix predicate on the "music_ip_id" field.
func MusicIPIDHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDIsNil applies the IsNil predicate on the "music_ip_id" field.
func MusicIPIDIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMusicIPID)))
	})
}

// MusicIPIDNotNil applies the NotNil predicate on the "music_ip_id" field.
func MusicIPIDNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMusicIPID)))
	})
}

// MusicIPIDEqualFold applies the EqualFold predicate on the "music_ip_id" field.
func MusicIPIDEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMusicIPID), v))
	})
}

// MusicIPIDContainsFold applies the ContainsFold predicate on the "music_ip_id" field.
func MusicIPIDContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMusicIPID), v))
	})
}

// RemixedByEQ applies the EQ predicate on the "remixed_by" field.
func RemixedByEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemixedBy), v))
	})
}

// RemixedByNEQ applies the NEQ predicate on the "remixed_by" field.
func RemixedByNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemixedBy), v))
	})
}

// RemixedByIn applies the In predicate on the "remixed_by" field.
func RemixedByIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemixedBy), v...))
	})
}

// RemixedByNotIn applies the NotIn predicate on the "remixed_by" field.
func RemixedByNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemixedBy), v...))
	})
}

// RemixedByGT applies the GT predicate on the "remixed_by" field.
func RemixedByGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemixedBy), v))
	})
}

// RemixedByGTE applies the GTE predicate on the "remixed_by" field.
func RemixedByGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemixedBy), v))
	})
}

// RemixedByLT applies the LT predicate on the "remixed_by" field.
func RemixedByLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemixedBy), v))
	})
}

// RemixedByLTE applies the LTE predicate on the "remixed_by" field.
func RemixedByLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemixedBy), v))
	})
}

// RemixedByContains applies the Contains predicate on the "remixed_by" field.
func RemixedByContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemixedBy), v))
	})
}

// RemixedByHasPrefix applies the HasPrefix predicate on the "remixed_by" field.
func RemixedByHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemixedBy), v))
	})
}

// RemixedByHasSuffix applies the HasSuffix predicate on the "remixed_by" field.
func RemixedByHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemixedBy), v))
	})
}

// RemixedByIsNil applies the IsNil predicate on the "remixed_by" field.
func RemixedByIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemixedBy)))
	})
}

// RemixedByNotNil applies the NotNil predicate on the "remixed_by" field.
func RemixedByNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemixedBy)))
	})
}

// RemixedByEqualFold applies the EqualFold predicate on the "remixed_by" field.
func RemixedByEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemixedBy), v))
	})
}

// RemixedByContainsFold applies the ContainsFold predicate on the "remixed_by" field.
func RemixedByContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemixedBy), v))
	})
}

// ReplayGainAlbumGainEQ applies the EQ predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainNEQ applies the NEQ predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainNEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainIn applies the In predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplayGainAlbumGain), v...))
	})
}

// ReplayGainAlbumGainNotIn applies the NotIn predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainNotIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplayGainAlbumGain), v...))
	})
}

// ReplayGainAlbumGainGT applies the GT predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainGT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainGTE applies the GTE predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainGTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainLT applies the LT predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainLT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainLTE applies the LTE predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainLTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplayGainAlbumGain), v))
	})
}

// ReplayGainAlbumGainIsNil applies the IsNil predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReplayGainAlbumGain)))
	})
}

// ReplayGainAlbumGainNotNil applies the NotNil predicate on the "replay_gain_album_gain" field.
func ReplayGainAlbumGainNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReplayGainAlbumGain)))
	})
}

// ReplayGainAlbumPeakEQ applies the EQ predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakNEQ applies the NEQ predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakNEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakIn applies the In predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplayGainAlbumPeak), v...))
	})
}

// ReplayGainAlbumPeakNotIn applies the NotIn predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakNotIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplayGainAlbumPeak), v...))
	})
}

// ReplayGainAlbumPeakGT applies the GT predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakGT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakGTE applies the GTE predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakGTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakLT applies the LT predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakLT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakLTE applies the LTE predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakLTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplayGainAlbumPeak), v))
	})
}

// ReplayGainAlbumPeakIsNil applies the IsNil predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReplayGainAlbumPeak)))
	})
}

// ReplayGainAlbumPeakNotNil applies the NotNil predicate on the "replay_gain_album_peak" field.
func ReplayGainAlbumPeakNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReplayGainAlbumPeak)))
	})
}

// ReplayGainTrackGainEQ applies the EQ predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainNEQ applies the NEQ predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainNEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainIn applies the In predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplayGainTrackGain), v...))
	})
}

// ReplayGainTrackGainNotIn applies the NotIn predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainNotIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplayGainTrackGain), v...))
	})
}

// ReplayGainTrackGainGT applies the GT predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainGT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainGTE applies the GTE predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainGTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainLT applies the LT predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainLT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainLTE applies the LTE predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainLTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplayGainTrackGain), v))
	})
}

// ReplayGainTrackGainIsNil applies the IsNil predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReplayGainTrackGain)))
	})
}

// ReplayGainTrackGainNotNil applies the NotNil predicate on the "replay_gain_track_gain" field.
func ReplayGainTrackGainNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReplayGainTrackGain)))
	})
}

// ReplayGainTrackPeakEQ applies the EQ predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakNEQ applies the NEQ predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakNEQ(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakIn applies the In predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplayGainTrackPeak), v...))
	})
}

// ReplayGainTrackPeakNotIn applies the NotIn predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakNotIn(vs ...float64) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplayGainTrackPeak), v...))
	})
}

// ReplayGainTrackPeakGT applies the GT predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakGT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakGTE applies the GTE predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakGTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakLT applies the LT predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakLT(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakLTE applies the LTE predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakLTE(v float64) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplayGainTrackPeak), v))
	})
}

// ReplayGainTrackPeakIsNil applies the IsNil predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReplayGainTrackPeak)))
	})
}

// ReplayGainTrackPeakNotNil applies the NotNil predicate on the "replay_gain_track_peak" field.
func ReplayGainTrackPeakNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReplayGainTrackPeak)))
	})
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMimeType), v))
	})
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMimeType), v))
	})
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMimeType), v...))
	})
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Song {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Song(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMimeType), v...))
	})
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMimeType), v))
	})
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMimeType), v))
	})
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMimeType), v))
	})
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMimeType), v))
	})
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMimeType), v))
	})
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMimeType), v))
	})
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMimeType), v))
	})
}

// MimeTypeIsNil applies the IsNil predicate on the "mime_type" field.
func MimeTypeIsNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMimeType)))
	})
}

// MimeTypeNotNil applies the NotNil predicate on the "mime_type" field.
func MimeTypeNotNil() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMimeType)))
	})
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMimeType), v))
	})
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMimeType), v))
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Song) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		p(s.Not())
	})
}
