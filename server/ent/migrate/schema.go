// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// SongsColumns holds the columns for the "songs" table.
	SongsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "title_sort", Type: field.TypeString, Nullable: true},
		{Name: "artists", Type: field.TypeJSON, Nullable: true},
		{Name: "first_artist", Type: field.TypeString, Nullable: true},
		{Name: "first_artist_sort", Type: field.TypeString, Nullable: true},
		{Name: "first_album_artist", Type: field.TypeString, Nullable: true},
		{Name: "first_album_artist_sort", Type: field.TypeString, Nullable: true},
		{Name: "album_artist", Type: field.TypeString, Nullable: true},
		{Name: "album", Type: field.TypeString, Nullable: true},
		{Name: "publisher", Type: field.TypeString, Nullable: true},
		{Name: "first_composer", Type: field.TypeString, Nullable: true},
		{Name: "composers", Type: field.TypeString, Nullable: true},
		{Name: "conductor", Type: field.TypeString, Nullable: true},
		{Name: "genre", Type: field.TypeString, Nullable: true},
		{Name: "grouping", Type: field.TypeString, Nullable: true},
		{Name: "year", Type: field.TypeUint, Nullable: true},
		{Name: "track_number", Type: field.TypeUint, Nullable: true},
		{Name: "of_track_number", Type: field.TypeUint, Nullable: true},
		{Name: "disk_number", Type: field.TypeUint, Nullable: true},
		{Name: "of_disk_number", Type: field.TypeUint, Nullable: true},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "play_count", Type: field.TypeUint},
		{Name: "skipped_count", Type: field.TypeUint},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "beats_per_minute", Type: field.TypeUint, Nullable: true},
		{Name: "copyright", Type: field.TypeString, Nullable: true},
		{Name: "date_tagged", Type: field.TypeTime, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "first_composer_sort", Type: field.TypeString, Nullable: true},
		{Name: "artists_sort", Type: field.TypeString, Nullable: true},
		{Name: "lyrics", Type: field.TypeString, Nullable: true},
		{Name: "initial_key", Type: field.TypeString, Nullable: true},
		{Name: "isrc", Type: field.TypeString, Nullable: true},
		{Name: "subtitle", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_artist_id", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_disc_id", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_artist_id", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_country", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_group_id", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_id", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_status", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_release_type", Type: field.TypeString, Nullable: true},
		{Name: "music_brainz_track_id", Type: field.TypeString, Nullable: true},
		{Name: "music_ip_id", Type: field.TypeString, Nullable: true},
		{Name: "remixed_by", Type: field.TypeString, Nullable: true},
		{Name: "replay_gain_album_gain", Type: field.TypeFloat64, Nullable: true},
		{Name: "replay_gain_album_peak", Type: field.TypeFloat64, Nullable: true},
		{Name: "replay_gain_track_gain", Type: field.TypeFloat64, Nullable: true},
		{Name: "replay_gain_track_peak", Type: field.TypeFloat64, Nullable: true},
		{Name: "mime_type", Type: field.TypeString, Nullable: true},
	}
	// SongsTable holds the schema information for the "songs" table.
	SongsTable = &schema.Table{
		Name:        "songs",
		Columns:     SongsColumns,
		PrimaryKey:  []*schema.Column{SongsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:        "tags",
		Columns:     TagsColumns,
		PrimaryKey:  []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SongTagsColumns holds the columns for the "song_tags" table.
	SongTagsColumns = []*schema.Column{
		{Name: "song_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// SongTagsTable holds the schema information for the "song_tags" table.
	SongTagsTable = &schema.Table{
		Name:       "song_tags",
		Columns:    SongTagsColumns,
		PrimaryKey: []*schema.Column{SongTagsColumns[0], SongTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "song_tags_song_id",
				Columns: []*schema.Column{SongTagsColumns[0]},

				RefColumns: []*schema.Column{SongsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "song_tags_tag_id",
				Columns: []*schema.Column{SongTagsColumns[1]},

				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		SongsTable,
		TagsTable,
		SongTagsTable,
	}
)

func init() {
	SongTagsTable.ForeignKeys[0].RefTable = SongsTable
	SongTagsTable.ForeignKeys[1].RefTable = TagsTable
}
